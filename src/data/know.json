{
  "know": [
    {
      "id": "dg321",
      "topic": "CSS FlexBox",
      "question": "¿Qué es FlexBox en CSS?",
      "answer": "FlexBox es un modelo de diseño en CSS para distribuir elementos en una página.",
      "expanded": "FlexBox, o Flexible Box Layout, es un modelo de diseño en CSS que permite distribuir y alinear elementos dentro de un contenedor de manera eficiente, incluso cuando el tamaño de los elementos es desconocido o dinámico.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "a1b2c",
      "topic": "CSS FlexBox",
      "question": "¿Cuál es la propiedad para definir el contenedor flexible?",
      "answer": "display: flex;",
      "expanded": "La propiedad 'display: flex;' define un elemento como un contenedor flexible, permitiendo que sus elementos secundarios se distribuyan en una línea o columna flexibles.",
      "video": "",
      "time": "",
      "okCounter": 2
    },
    {
      "id": "d3e4f",
      "topic": "CSS FlexBox",
      "question": "¿Cómo se establece la dirección de los elementos flexibles?",
      "answer": "flex-direction",
      "expanded": "Los valores posibles son 'row', 'row-reverse', 'column' y 'column-reverse'",
      "video": "",
      "time": "",
      "okCounter": 3
    },
    {
      "id": "g5h6i",
      "topic": "CSS FlexBox",
      "question": "¿Qué propiedad controla cómo se acomodan los elementos en flex?",
      "answer": "flex-wrap",
      "expanded": "La propiedad 'flex-wrap' especifica si los elementos flexibles deben forzar una sola línea o si pueden fluir en múltiples líneas. Los valores posibles son 'nowrap', 'wrap' y 'wrap-reverse'.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "j7k8l",
      "topic": "CSS FlexBox",
      "question": "¿Cómo se alinea los elementos flexibles a lo largo del eje principal de su contenedor?",
      "answer": "justify-content",
      "expanded": "justify-content es una propiedad de CSS Flexbox que alinea los elementos flexibles a lo largo del eje principal de su contenedor. Sus valores comunes incluyen:\n\nflex-start: Alínea los elementos al inicio del contenedor.\nflex-end: Alínea los elementos al final del contenedor.\ncenter: Centra los elementos dentro del contenedor.\nspace-between: Distribuye los elementos con espacio igual entre ellos.\nspace-around: Distribuye los elementos con espacio igual alrededor de ellos.\nspace-evenly: Distribuye los elementos con espacio igual entre ellos y alrededor de ellos.",
      "video": "",
      "time": "",
      "okCounter": 2
    },
    {
      "id": "p1q2r",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se alinea el contenido total de una cuadrícula a lo largo del eje horizontal?",
      "answer": "justify-content.",
      "expanded": "La propiedad 'justify-content' alinea el contenido total de una cuadrícula a lo largo del eje horizontal del contenedor. Los valores posibles son 'start', 'end', 'center', 'space-between', 'space-around' y 'space-evenly'.\n\nEn CSS Grid, la propiedad `justify-content: space-evenly;` distribuye el espacio extra entre los elementos de forma que los espacios entre ellos, así como los espacios antes del primer y después del último elemento, sean iguales. Esto asegura una distribución uniforme del espacio en el contenedor.",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "s3t4u",
      "topic": "CSS GirdBox",
      "question": "¿Qué propiedad alinea elementos en una cuadrícula a lo largo del eje vertical?",
      "answer": "align-items",
      "expanded": "En CSS Grid, align-items se utiliza para alinear los elementos de la cuadrícula a lo largo del eje vertical (eje de bloque). Los valores posibles son:\n\nstart: Alinea los elementos al inicio del contenedor.\nend: Alinea los elementos al final del contenedor.\ncenter: Alinea los elementos en el centro del contenedor.\nstretch: Estira los elementos para que llenen el contenedor (valor por defecto).\n\n\n\n\n\n",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "y7z8a",
      "topic": "CSS GirdBox",
      "question": "¿Qué propiedad permite que un elemento abarque varias columnas?",
      "answer": "grid-column.",
      "expanded": "La propiedad 'grid-column' permite que un elemento abarque varias columnas en una cuadrícula. Utiliza valores de inicio y fin, como 'grid-column: 1 / 3' para abarcar desde la primera hasta la tercera columna.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "b9c0d",
      "topic": "CSS FlexBox",
      "question": "¿Cómo se establece el orden de los elementos flexibles dentro del contenedor?",
      "answer": "order.",
      "expanded": "La propiedad 'order' define el orden en que los elementos flexibles se disponen dentro del contenedor. El valor por defecto es 0, y se puede usar cualquier número entero positivo o negativo.",
      "video": "",
      "time": "",
      "okCounter": 2
    },
    {
      "id": "a1b2c",
      "topic": "CSS GirdBox",
      "question": "¿Cuál es la propiedad para definir el contenedor de cuadrícula?",
      "answer": "display: grid;",
      "expanded": "La propiedad 'display: grid;' define un elemento como un contenedor de cuadrícula, permitiendo que sus elementos secundarios se posicionen en una estructura de filas y columnas.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "d3e4f",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se establece el número y tamaño de las columnas en una cuadrícula?",
      "answer": "grid-template-columns.",
      "expanded": "La propiedad 'grid-template-columns' define el número y tamaño de las columnas en una cuadrícula. Se pueden especificar tamaños fijos, porcentajes, fracciones (fr) o valores de longitud.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "g5h6i",
      "topic": "CSS GirdBox",
      "question": "¿Qué propiedad establece el número y tamaño de las filas en una cuadrícula?",
      "answer": "grid-template-rows.",
      "expanded": "La propiedad 'grid-template-rows' define el número y tamaño de las filas en una cuadrícula. Al igual que 'grid-template-columns', se pueden especificar tamaños fijos, porcentajes, fracciones (fr) o valores de longitud.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "j7k8l",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se define el espacio entre filas y columnas en una cuadrícula?",
      "answer": "grid-gap.",
      "expanded": "La propiedad 'grid-gap' (también conocida como 'gap') define el espacio entre filas y columnas en una cuadrícula. Puede ser un valor único para ambos o dos valores separados para las filas y columnas.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "p1q2r",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se alinea el contenido total de una cuadrícula a lo largo del eje horizontal?",
      "answer": "justify-content.",
      "expanded": "La propiedad 'justify-content' alinea el contenido total de una cuadrícula a lo largo del eje horizontal del contenedor. Los valores posibles son 'start', 'end', 'center', 'space-between', 'space-around' y 'space-evenly'.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "s3t4u",
      "topic": "CSS GirdBox",
      "question": "¿Qué propiedad alinea elementos en una cuadrícula a lo largo del eje vertical?",
      "answer": "align-items.",
      "expanded": "La propiedad 'align-items' alinea elementos en una cuadrícula a lo largo del eje vertical. Los valores posibles incluyen 'start', 'end', 'center' y 'stretch'.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "v5w6x",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se alinea el contenido total de una cuadrícula a lo largo del eje vertical?",
      "answer": "align-content.",
      "expanded": "La propiedad 'align-content' alinea el contenido total de una cuadrícula a lo largo del eje vertical del contenedor. Los valores posibles son 'start', 'end', 'center', 'space-between', 'space-around' y 'space-evenly'.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "y7z8a",
      "topic": "CSS GirdBox",
      "question": "¿Qué propiedad permite que un elemento abarque varias columnas?",
      "answer": "grid-column.",
      "expanded": "La propiedad 'grid-column' permite que un elemento abarque varias columnas en una cuadrícula. Utiliza valores de inicio y fin, como 'grid-column: 1 / 3' para abarcar desde la primera hasta la tercera columna.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "b9c0d",
      "topic": "CSS GirdBox",
      "question": "¿Cómo se permite que un elemento abarque varias filas en una cuadrícula?",
      "answer": "grid-row.",
      "expanded": "La propiedad 'grid-row' permite que un elemento abarque varias filas en una cuadrícula. Similar a 'grid-column', utiliza valores de inicio y fin, como 'grid-row: 1 / 3' para abarcar desde la primera hasta la tercera fila.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r4",
      "topic": "ReactJs",
      "question": "¿Cuál es la diferencia entre componentes funcionales y componentes de clase en React?",
      "answer": "Los componentes funcionales son funciones de JavaScript que aceptan props como argumento y devuelven elementos React. Los componentes de clase son clases de ES6 que extienden la clase Component de React y pueden manejar estado interno.",
      "expanded": "Los componentes funcionales son más simples y concisos, ideales para componentes sin estado (stateless). Los componentes de clase ofrecen características como manejo de estado y métodos de ciclo de vida, pero con una sintaxis más verbosa. Con la introducción de los Hooks en React 16.8, los componentes funcionales pueden manejar estado y ciclo de vida, eliminando la necesidad de usar clases en muchos casos.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r5",
      "topic": "ReactJs",
      "question": "¿Qué son los Hooks en React y cuál es su propósito?",
      "answer": "Los Hooks son funciones especiales que permiten usar estado y otras características de React en componentes funcionales. Su propósito es ofrecer una forma más directa y efectiva de manejar el estado y los ciclos de vida en los componentes funcionales.",
      "expanded": "Los Hooks fueron introducidos en React 16.8 para permitir el uso de estado y otras características previamente disponibles solo en componentes de clase, dentro de componentes funcionales. Algunos Hooks comunes son useState para manejar el estado local, useEffect para efectuar efectos secundarios en componentes funcionales, y useContext para acceder al contexto de React.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r6",
      "topic": "ReactJs",
      "question": "¿Cómo se consume una API en una aplicación React?",
      "answer": "Para utilizar una API en React, se puede utilizar la función fetch para hacer solicitudes HTTP o bibliotecas como axios. Los datos obtenidos pueden ser almacenados en el estado del componente usando setState o Hooks como useState.",
      "expanded": "Para integrar una API en una aplicación React, se pueden realizar solicitudes HTTP utilizando la función fetch nativa de JavaScript o bibliotecas como axios, que proporcionan métodos más avanzados y compatibilidad con navegadores antiguos. Una vez obtenidos los datos, se almacenan en el estado del componente usando setState en componentes de clase o useState en componentes funcionales. Es importante manejar el ciclo de vida adecuadamente para gestionar las solicitudes y respuestas de la API.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r8",
      "topic": "ReactJs",
      "question": "¿Qué es el Virtual DOM y cómo lo utiliza React?",
      "answer": "El Virtual DOM es una representación ligera y virtual del DOM en memoria. React lo utiliza para optimizar las actualizaciones del DOM real, minimizando los cambios y mejorando el rendimiento de la aplicación.",
      "expanded": "El Virtual DOM en React es una técnica que consiste en mantener una representación ligera y eficiente del DOM en memoria. Cuando el estado de un componente cambia, React compara el Virtual DOM actual con el anterior y determina los cambios mínimos necesarios para actualizar el DOM real. Esto optimiza el rendimiento al reducir el número de manipulaciones directas en el DOM, que son costosas en términos de rendimiento.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r9",
      "topic": "ReactJs",
      "question": "¿Cómo se implementa el enrutamiento en una aplicación React?",
      "answer": "El enrutamiento en React se implementa generalmente utilizando bibliotecas como React Router. Se define un conjunto de rutas con correspondencia a componentes específicos que se renderizan cuando la URL coincide con ciertos patrones.",
      "expanded": "Para implementar enrutamiento en una aplicación React, se utiliza la biblioteca React Router, que permite definir rutas en función de la URL del navegador. Cada ruta especifica un componente React que se renderizará cuando la URL coincida con el patrón definido. Esto permite la navegación y el manejo de diferentes vistas dentro de una misma aplicación React de manera estructurada y eficiente.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r10",
      "topic": "ReactJs",
      "question": "¿Cómo se realizan pruebas unitarias en componentes React?",
      "answer": "Las pruebas unitarias en componentes React se realizan con herramientas como Jest y React Testing Library. Se escriben casos de prueba para verificar el comportamiento esperado del componente bajo diferentes condiciones.",
      "expanded": "Para realizar pruebas unitarias en componentes React, se utiliza Jest como marco de pruebas y React Testing Library para simular y verificar el comportamiento del componente. Los casos de prueba se centran en asegurar que el componente funcione correctamente en diferentes situaciones, desde renderizado básico hasta interacciones complejas como cambios de estado y manejo de eventos.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r11",
      "topic": "ReactJs",
      "question": "¿Cómo se gestiona el estado global en aplicaciones React?",
      "answer": "El estado global en aplicaciones React se gestiona utilizando bibliotecas como Redux o el contexto de React. Estas herramientas permiten almacenar y actualizar datos que son accesibles globalmente a través de la aplicación.",
      "expanded": "Para gestionar el estado global en aplicaciones React, se utilizan bibliotecas como Redux o el contexto de React. Redux proporciona un contenedor de estado predecible para aplicaciones JavaScript, permitiendo la gestión centralizada de datos globales y facilitando el manejo de acciones asíncronas y complejas. El contexto de React es una característica incorporada que permite pasar datos a través del árbol de componentes sin tener que pasar props manualmente a cada nivel.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r12",
      "topic": "ReactJs",
      "question": "¿Qué estrategias se pueden emplear para optimizar el rendimiento de aplicaciones React?",
      "answer": "Para optimizar el rendimiento en aplicaciones React se pueden utilizar técnicas como el uso eficiente del Virtual DOM, la memoización de componentes con React.memo y el lazy loading de componentes.",
      "expanded": "- Optimizar el rendimiento en aplicaciones React implica utilizar técnicas como minimizar la manipulación directa del DOM utilizando el Virtual DOM, que React gestiona eficientemente. \n\n- React.memo se usa para memoizar componentes y evitar renderizaciones innecesarias cuando las propiedades no cambian. \n\n- El lazy loading permite cargar componentes de manera diferida, reduciendo el tiempo de carga inicial. \n\n- Además, identificar y eliminar renderizaciones innecesarias y optimizar las operaciones costosas son prácticas clave para mejorar la experiencia del usuario.\n\nHACIA ABAJO: Abstraer el estado https://www.youtube.com/watch?v=AyuTxN2aj_0&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=13&t=148s\n\nDESDE ARRIBA: Abstraer el estado https://www.youtube.com/watch?v=AyuTxN2aj_0&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=13&t=410s\n\nDESDE ARRIBA 2: Componente como props https://www.youtube.com/watch?v=AyuTxN2aj_0&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=13&t=590s",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r13",
      "topic": "ReactJs",
      "question": "¿Cómo se integra CSS en aplicaciones React?",
      "answer": "El CSS se puede integrar en aplicaciones React de varias formas: usando archivos CSS externos, estilos en línea con objetos JavaScript o con bibliotecas como styled-components para CSS-in-JS.",
      "expanded": "Para integrar CSS en aplicaciones React, se pueden utilizar métodos como importar archivos CSS externos directamente en componentes, definir estilos en línea utilizando objetos JavaScript o emplear bibliotecas como styled-components, que permiten escribir estilos CSS dentro de componentes JavaScript. Cada método tiene sus ventajas dependiendo de la escala y complejidad del proyecto, así como de las preferencias del equipo de desarrollo.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r14",
      "topic": "ReactJs",
      "question": "¿Cómo se manejan los eventos en React?",
      "answer": "Los eventos en React se manejan utilizando sintaxis JSX similar a HTML, pero con nombres de eventos camelCase y pasando funciones como manejadores de eventos.",
      "expanded": "Por ejemplo: onClick en lugar de onclick\n\nAdemás, se pasan funciones como manejadores de eventos en lugar de cadenas de texto. Esto asegura que el contexto de 'this' se maneje correctamente y permite un código más declarativo y mantenible.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r15",
      "topic": "ReactJs",
      "question": "¿Qué es el contexto en React y cuándo se utiliza?",
      "answer": "El contexto en React es una forma de pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel",
      "expanded": "Es útil cuando ciertos datos, como el tema de la interfaz de usuario o la información de autenticación del usuario, deben estar disponibles globalmente en la aplicación. \nEl contexto se establece con el componente Provider y se consume con el componente Consumer o useContext Hook.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r16",
      "topic": "ReactJs",
      "question": "¿Cómo se realiza el renderizado condicional en React?",
      "answer": "El renderizado condicional en React se realiza utilizando declaraciones if o el operador ternario en JSX, basándose en expresiones JavaScript para decidir qué elementos renderizar.",
      "expanded": "Esto permite renderizar diferentes componentes o elementos basándose en condiciones específicas, como el estado del componente o propiedades pasadas. \n\nEl renderizado condicional es fundamental para mostrar diferentes vistas o componentes según el estado de la aplicación o la lógica de negocio.",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "r17",
      "topic": "ReactJs",
      "question": "¿Cómo se crean y utilizan hooks personalizados en React?",
      "answer": "Los hooks personalizados en React son funciones JavaScript que utilizan hooks internos de React y pueden ser reutilizados en varios componentes funcionales para compartir lógica.",
      "expanded": "Los hooks personalizados en React son funciones JavaScript que utilizan hooks internos de React como useState y useEffect, permitiendo encapsular lógica compleja y reutilizable en componentes funcionales. Para crear un hook personalizado, se deben seguir las reglas de nombre (comenzando con 'use') y asegurarse de que se maneje correctamente el ciclo de vida del hook, evitando efectos secundarios no deseados.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r18",
      "topic": "ReactJs",
      "question": "¿Cómo se integra TypeScript con React?",
      "answer": "TypeScript se integra con React utilizando el archivo tsconfig.json ",
      "expanded": "{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\",\n    \"target\": \"ES2015\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"display\": \"Recommended\"\n}\n\nEn compilerOptions, como su nombre indica metemos las opciones que queremos indicar al compilador de Typescript.\n\noutDir:  indica en qué carpeta Typescript va a dejar los ficheros .js compilados. Si esta opción no la seteas entonces Typescript va a dejar el .js en la misma carpeta que el fichero .ts que usa en la compilación.\n\nEn target indicamos la versión de Javascript a la que queremos compilar. Normalmente se suele poner es6 ya que es una versión que soportan todos los navegadores modernos. Otro posible valor es con el año, por ejemplo es2022.\n\nEn module ponemos que sistema de módulos queremos usar al compilar. Por ejemplo puedes hacer que los export sean estilo commonjs como este caso, umd, amd o incluso versiones de Javascript como es6\n\nEl campo strict es importante, indica a Typescript que tiene que ser mucho más estricto a la hora de pasar o no errores. Yo recomiendo siempre tenerlo activado. \n\nTienes que saber que también puedes ser más selectivo en qué cosas quieres que sean estrictas y qué no, usando los campos alwaysStrict, strictNullChecks, strictBindCallApply, strictFunctionTypes o strictPropertyInitializa\nesModuleInterop sirve para trabajar de una forma más sencilla entre los módulos CommonJS y de ECMAScript, recomiendo activarla siempre.\n\nskipLibCheck. Esta setting ayuda a que Typescript tarde menos en compilar ya que no va comprobar el tipado en los ficheros de declaración. También ayuda en los casos en los que haya varias librerías iguales con distintas versiones y ficheros de declaración dentro de la carpeta node_modules.\n\nforceConsistentCasingInFileNames. Esta opción ayuda a que Typescript tire un error en caso de que por ejemplo se intente importar un fichero con un nombre en un case distinto al del nombre del fichero. Por ejemplo intentar importar miFichero.ts usando \"MiFichero.ts\" en el import.",
      "video": "https://www.youtube.com/watch?v=p3syft8vKM8",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "r19",
      "topic": "ReactJs",
      "question": "¿Cómo se optimiza el re-renderizado en React?",
      "answer": "El re-renderizado en React se optimiza utilizando PureComponent o React.memo para componentes que no necesitan ser re-renderizados frecuentemente.",
      "expanded": "Para optimizar el re-renderizado en React, se utilizan \n- PureComponent (para componentes de clase) \n- la función React.memo (para componentes funcionales) para evitar renderizaciones innecesarias. \n\nEstos métodos comparan las props o el estado previo con los actuales y evitan el renderizado si no han cambiado. Además, se pueden utilizar técnicas como la extracción de cálculos costosos fuera del método render para mejorar el rendimiento general de la aplicación.",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "r20",
      "topic": "ReactJs",
      "question": "¿Cómo se manejan los formularios en React?",
      "answer": "Los formularios en React se manejan utilizando el estado para los datos del formulario y manejadores de eventos para actualizar el estado según la entrada del usuario.",
      "expanded": "En React, los formularios funcionan de manera similar a HTML pero con una gestión más dinámica del estado. Se utiliza el estado para almacenar los datos del formulario y se utilizan manejadores de eventos como onChange para actualizar el estado según la entrada del usuario. Además, se pueden aplicar validaciones y lógica personalizada para manejar envíos de formularios y retroalimentación visual.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r21",
      "topic": "ReactJs",
      "question": "¿Cuáles son las opciones para estilizar componentes en React?",
      "answer": "Las opciones para estilizar componentes en React incluyen CSS tradicional, CSS en módulos, styled-components y otras bibliotecas de CSS-in-JS.",
      "expanded": "En React, se pueden estilizar componentes utilizando varias técnicas. Estas incluyen: 1) CSS tradicional, importando archivos CSS en componentes; 2) CSS en módulos, que permite el alcance local de estilos en archivos de módulos CSS; 3) styled-components, una biblioteca que permite escribir estilos directamente dentro de los componentes React utilizando JavaScript; y 4) otras bibliotecas de CSS-in-JS que ofrecen características adicionales como temas y estilos condicionales.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r22",
      "topic": "ReactJs",
      "question": "¿Qué son y cómo se utilizan los hooks avanzados en React?",
      "answer": "Los hooks avanzados en React son hooks personalizados que encapsulan lógica compleja y reutilizable, como el uso de contextos, referencias y efectos personalizados.",
      "expanded": "Los hooks avanzados en React son funciones personalizadas que utilizan otros hooks internos de React y encapsulan lógica compleja. Pueden incluir el uso de contextos para compartir datos a través de componentes sin necesidad de props, el uso de referencias para interactuar con el DOM de manera directa y efectos personalizados para manejar lógica asíncrona o efectos complejos.",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "r23",
      "topic": "ReactJs",
      "question": "¿Cómo se realiza el deployment de una aplicación React en producción?",
      "answer": "Para realizar el deployment de una aplicación React en producción, se puede utilizar herramientas como Create React App para generar una versión optimizada, que luego se puede desplegar en plataformas de hosting como Netlify, Vercel, Firebase o AWS Amplify.",
      "expanded": "Para desplegar una aplicación React en producción, se utiliza el comando build de Create React App para generar una versión optimizada de la aplicación. Esta versión incluye código minificado y optimizado para producción. Luego, se puede subir la carpeta build resultante a plataformas de hosting como Netlify, Vercel, Firebase Hosting o AWS Amplify, que ofrecen despliegue sencillo y escalable de aplicaciones web estáticas.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r25",
      "topic": "ReactJs",
      "question": "¿Cómo se realizan pruebas end-to-end en aplicaciones React?",
      "answer": "Las pruebas end-to-end en aplicaciones React se pueden realizar utilizando herramientas como Cypress o Selenium.",
      "expanded": "Estas herramientas permiten simular interacciones del usuario, como hacer clic en botones y completar formularios, y verificar el comportamiento de extremo a extremo de la aplicación.\n\nLas pruebas end-to-end son importantes para garantizar que todas las partes de la aplicación funcionen correctamente juntas, desde la interfaz de usuario hasta el backend.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r26",
      "topic": "ReactJs",
      "question": "¿Cómo se gestiona el estado en aplicaciones React grandes y complejas?",
      "answer": "En aplicaciones React grandes y complejas, se puede utilizar Redux para centralizar y gestionar el estado global de manera predecible y eficiente.",
      "expanded": "En aplicaciones React grandes y complejas, la gestión del estado puede volverse compleja. Se recomienda utilizar Redux para centralizar el estado global de la aplicación y facilitar su gestión de manera predecible y eficiente. Redux proporciona un flujo de datos unidireccional y un contenedor de estado único, lo que simplifica el seguimiento y la depuración de cambios en el estado a medida que la aplicación crece.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r27",
      "topic": "ReactJs",
      "question": "¿Qué es el lazy loading y cómo se implementa en React?",
      "answer": "El lazy loading en React es una técnica que permite cargar componentes o recursos de manera diferida, mejorando el rendimiento inicial de la aplicación. Se implementa utilizando React.lazy junto con Suspense para manejar la carga asincrónica de componentes.",
      "expanded": "El lazy loading en React es una técnica que consiste en cargar componentes o recursos de manera diferida, es decir, cuando son necesarios y no de manera anticipada. Esto mejora el tiempo de carga inicial de la aplicación, especialmente útil para componentes grandes o que no son esenciales en la primera vista. Se implementa utilizando React.lazy para importar dinámicamente componentes y Suspense para manejar la carga asincrónica y mostrar un indicador de carga mientras se cargan los componentes.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r28",
      "topic": "ReactJs",
      "question": "¿Cuáles son las diferencias clave entre React y React Native?",
      "answer": "React se utiliza para construir aplicaciones web usando HTML y CSS, mientras que React Native se utiliza para construir aplicaciones móviles nativas utilizando componentes nativos de iOS y Android.",
      "expanded": "React se utiliza principalmente para construir aplicaciones web utilizando HTML y CSS para renderizar en navegadores. Por otro lado, React Native es un marco de desarrollo que permite construir aplicaciones móviles nativas utilizando componentes nativos de iOS y Android. Aunque ambos utilizan la misma sintaxis y conceptos básicos de React, cada uno está optimizado para sus respectivas plataformas y tiene diferentes consideraciones de rendimiento y experiencia de usuario.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r29",
      "topic": "ReactJs",
      "question": "¿Cómo se integra Firebase con aplicaciones React?",
      "answer": "Firebase se puede integrar con aplicaciones React utilizando el SDK de Firebase para autenticación, bases de datos en tiempo real, almacenamiento y análisis, facilitando el desarrollo de aplicaciones web en tiempo real.",
      "expanded": "Para integrar Firebase con aplicaciones React, se utiliza el SDK de Firebase que proporciona acceso a servicios como autenticación de usuarios, bases de datos en tiempo real, almacenamiento de archivos y análisis. Firebase se integra fácilmente con React y ofrece bibliotecas específicas para JavaScript que simplifican el manejo de datos y la implementación de funcionalidades como la autenticación de usuarios y el almacenamiento de datos en la nube.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r30",
      "topic": "ReactJs",
      "question": "¿Qué es el deployment continuo y cómo se implementa en aplicaciones React?",
      "answer": "El deployment continuo en aplicaciones React es un proceso automatizado que permite desplegar cambios de manera frecuente y confiable en producción, utilizando herramientas como GitHub Actions o Travis CI.",
      "expanded": "El deployment continuo en aplicaciones React es un enfoque para automatizar el despliegue de cambios en producción de manera frecuente y confiable. Se implementa utilizando herramientas de integración y despliegue continuo (CI/CD) como GitHub Actions, Travis CI o GitLab CI/CD, que automatizan la construcción, prueba y despliegue de la aplicación React cuando se realizan cambios en el repositorio de código. Esto ayuda a mantener un ciclo de desarrollo ágil y asegura que las actualizaciones lleguen rápidamente a los usuarios finales.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r31",
      "topic": "ReactJs",
      "question": "¿Cómo se manejan los errores en aplicaciones React?",
      "answer": "En React, los errores se pueden manejar utilizando componentes de error, try-catch en métodos de ciclo de vida o capturando errores en componentes de alto nivel.",
      "expanded": "Para manejar errores en aplicaciones React, se pueden utilizar varias técnicas. Los componentes de error (Error Boundaries) son componentes de React que capturan errores en cualquier lugar de su árbol de componentes descendientes y los manejan de manera controlada. Además, se puede utilizar try-catch dentro de métodos de ciclo de vida como componentDidMount o componentDidUpdate para manejar errores específicos en operaciones asíncronas o de efectos secundarios. Capturar errores en componentes de alto nivel también es una práctica común para proporcionar una experiencia de usuario más robusta.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r32",
      "topic": "ReactJs",
      "question": "¿Cómo se implementa la internacionalización en aplicaciones React?",
      "answer": "La internacionalización en aplicaciones React se implementa utilizando bibliotecas como react-intl para gestionar mensajes traducidos y formatos locales, permitiendo adaptar la aplicación a diferentes idiomas y culturas.",
      "expanded": "Para implementar la internacionalización en aplicaciones React, se utiliza la biblioteca react-intl que facilita la gestión de mensajes traducidos y formatos locales. Esta biblioteca permite adaptar la aplicación a diferentes idiomas y culturas, proporcionando funciones para formatear fechas, números y monedas según las preferencias del usuario. Además, se pueden definir archivos de traducción con mensajes localizados y cambiar dinámicamente el idioma de la aplicación sin recargar la página.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "r33",
      "topic": "ReactJs",
      "question": "¿Cómo se optimizan las imágenes en aplicaciones React para mejorar el rendimiento?",
      "answer": "Para optimizar las imágenes en aplicaciones React, se pueden comprimir antes de la carga, utilizar formatos de imagen modernos como WebP y lazy loading para cargar imágenes solo cuando son visibles en la pantalla.",
      "expanded": "Para mejorar el rendimiento en aplicaciones React, es crucial optimizar el manejo de imágenes. Esto incluye comprimir las imágenes antes de subirlas al servidor, utilizando formatos de imagen modernos como WebP para reducir el tamaño del archivo sin sacrificar calidad visual, y implementar lazy loading para cargar imágenes solo cuando el usuario las ve en la pantalla. Estas prácticas ayudan a reducir el tiempo de carga de la página y mejorar la experiencia del usuario.",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "js1",
      "topic": "JS",
      "question": "¿Qué hace el método map en JavaScript?",
      "answer": "El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.",
      "expanded": "Sintaxis\nvar nuevo_array = arr.map(function callback(currentValue, index, array) {\n    // Elemento devuelto de nuevo_array\n}[, thisArg])\n\ncallback\nFunción que producirá un elemento del nuevo array, recibe tres argumentos:\n\ncurrentValue\nEl elemento actual del array que se está procesando.\n\nindex\nEl índice del elemento actual dentro del array.\n\narray\nEl array sobre el que se llama map.\n\nthisArg\nOpcional. Valor a usar como this al ejecutar callback.\n\nValor devuelto\nUn nuevo array en la que cada elemento es el resultado de ejecutar callback.",
      "video": "",
      "time": "",
      "okCounter": 6,
      "test": "learn"
    },
    {
      "id": "js2",
      "topic": "JS",
      "question": "¿Cómo funciona el método filter en JavaScript?",
      "answer": "El método filter en JavaScript crea un nuevo array con todos los elementos que pasan una prueba implementada por la función proporcionada.",
      "expanded": "El método filter en JavaScript se utiliza para crear un nuevo array con todos los elementos que cumplan una condición especificada por una función proporcionada. Esta función se aplica a cada elemento del array original, y si devuelve true, el elemento se incluye en el nuevo array; de lo contrario, no.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js3",
      "topic": "JS",
      "question": "¿Cuál es el propósito del método reduce en JavaScript?",
      "answer": "El método reduce en JavaScript se utiliza para reducir los elementos de un array a un solo valor mediante la ejecución de una función acumuladora.",
      "expanded": "El método reduce en JavaScript se utiliza para reducir los elementos de un array a un solo valor. Toma una función acumuladora como argumento, que se ejecuta en cada elemento del array (de izquierda a derecha), produciendo un único valor acumulado.\n\narray.reduce(callback(accumulator, currentValue, [currentIndex], [array]), [initialValue])\n\nParámetros\ncallback(accumulator, currentValue, currentIndex, array):\n- accumulator: Acumula el valor devuelto por la función callback. Es el valor acumulado previamente.\n- currentValue: El elemento actual que se está procesando en el array.\n- currentIndex: El índice del elemento actual que se está procesando en el array (opcional).\n- array: El array sobre el cual se llama reduce (opcional).\ninitialValue (opcional): Un valor que se usa como primer argumento para la primera llamada de la función callback. Si no se proporciona initialValue, el primer elemento del array se utiliza como el acumulador inicial y reduce ejecuta la función callback empezando por el segundo elemento en lugar del primero",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&t=728s",
      "time": "",
      "okCounter": 3,
      "test": "learn"
    },
    {
      "id": "js4",
      "topic": "JS",
      "question": "¿Qué diferencia hay entre forEach y map en JavaScript?",
      "answer": "map devuelve array, forEach no devuelve",
      "expanded": "La diferencia principal entre forEach y map en JavaScript es que forEach itera sobre los elementos de un array y ejecuta una función proporcionada en cada uno de ellos, pero no devuelve un nuevo array. En cambio, map también itera sobre los elementos del array y ejecuta una función en cada uno, pero devuelve un nuevo array con los resultados de estas funciones.\n\narray1.forEach((element) => console.log(element))\n\nnumbers.map(function (num) {\n  return Math.sqrt(num);\n});",
      "video": "",
      "time": "",
      "okCounter": 2,
      "test": "learn"
    },
    {
      "id": "js5",
      "topic": "JS",
      "question": "¿Cómo se ordenan elementos de un array en JavaScript utilizando el método sort?",
      "answer": "El método sort en JavaScript ordena los elementos de un array in situ y devuelve el array ordenado.",
      "expanded": "El método sort en JavaScript se utiliza para ordenar los elementos de un array in situ (es decir, modifica el array original). Por defecto, ordena los elementos como cadenas de texto Unicode y cambia el array original. Para ordenar números, es necesario proporcionar una función de comparación.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js6",
      "topic": "JS",
      "question": "¿Qué hace el método find en JavaScript? (simil filter)",
      "answer": "El método find en JavaScript devuelve el primer elemento de un array que cumple con una condición especificada por una función de prueba.",
      "expanded": "El método find en JavaScript se utiliza para encontrar el primer elemento en un array que cumpla con una condición especificada por una función de prueba. Retorna el valor del primer elemento que satisface la condición, o undefined si no se encuentra ninguno.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js7",
      "topic": "JS",
      "question": "¿Cuál es la utilidad del método some en JavaScript?",
      "answer": "El método some en JavaScript verifica si al menos un elemento de un array cumple con una condición proporcionada por una función de prueba.",
      "expanded": "El método some en JavaScript se utiliza para comprobar si al menos un elemento en un array cumple con una condición especificada por una función de prueba. Retorna true si al menos un elemento satisface la condición, y false si ningún elemento la cumple.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js8",
      "topic": "JS",
      "question": "¿Cómo se utiliza el método every en JavaScript? (todos)\nconst numbers = [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]\n",
      "answer": "El método every en JavaScript verifica si todos los elementos de un array cumplen con una condición proporcionada por una función de prueba.",
      "expanded": "Retorna true si todos los elementos satisfacen la condición, y false si al menos uno no la cumple.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js9",
      "topic": "JS",
      "question": "¿Qué hace el método concat en JavaScript?",
      "answer": "Combinar dos o más arrays.",
      "expanded": "El método concat en JavaScript se utiliza para combinar dos o más arrays en uno solo. Retorna un nuevo array que contiene los elementos de los arrays combinados, sin modificar los arrays originales.",
      "video": "",
      "time": "",
      "okCounter": 2,
      "test": "learn"
    },
    {
      "id": "js10",
      "topic": "JS",
      "question": "¿Cómo se obtiene el índice de un elemento en un array de primitivos en JavaScript? ",
      "answer": "El método indexOf",
      "expanded": "El método indexOf en JavaScript se utiliza para obtener el índice del primer elemento que coincida con el valor especificado en un array. Retorna -1 si el elemento no se encuentra en el array.\n\nSintaxis\narray.indexOf(searchElement[, fromIndex])\n\nIndica el índice por el que se comienza la búsqueda. Por defecto es 0, por lo que se busca en todo el array. \n- Si el índice es mayor o igual a la longitud del array, devuelve -1, ya que no se buscaría en el array. \n- Si el valor es negativo, se toma restando posiciones desde el final del array.\n- Si el índice calculado es menor de 0, la búsqueda se realizará por todo el array.\n\nHay que tener en cuenta que aunque el índice sea negativo, la búsqueda seguirá realizándose en un orden incremental. \n\nDescripción\nindexOf() compara searchElement con los elementos del array usando igualdad estricta (el mismo método que cuando se usa ===, o el operador igualdad-triple).",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js11",
      "topic": "JS",
      "question": "¿Qué hace el método slice en JavaScript?",
      "answer": "El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.",
      "expanded": "Sintaxis\narr.slice([inicio [, fin]])\n\ninicio\nÍndice donde empieza la extracción. Si el índice especificado es negativo, indica un desplazamiento desde el final del array.slice(-2) extrae los dos últimos elementos del array\n\nSi inicio es omitido el valor por defecto es 0 y si inicio es mayor a la longitud del array, se devuelve un array vacío.\n\nfin\nÍndice que marca el final de la extracción. Slice(1,4) extrae desde el segundo elemento hasta el cuarto (los elementos con índices 1, 2, y 3).\n\nCon un índice negativo, fin indica un desplazamiento desde el final de la secuencia. slice(2,-1) extrae desde el tercer hasta el penúltimo elemento en la secuencia.\n\nSi fin es omitido, slice extrae hasta el final de la secuencia (arr.length).\n\nSi fin es mayor a la longitud del array, slice extrae hasta el final de la secuencia (arr.length).",
      "video": "",
      "time": "",
      "okCounter": 5,
      "test": "learn"
    },
    {
      "id": "js12",
      "topic": "JS",
      "question": "¿Para que sirve y cómo se utiliza el método splice en JavaScript?",
      "answer": "El método splice en JavaScript se utiliza para modificar el contenido de un array.",
      "expanded": "Su sintaxis básica es array.splice(inicio, cantidad, elemento1, elemento2, ...), donde:\n\ninicio: Índice donde comenzarán los cambios.\ncantidad: Número de elementos a eliminar desde el índice de inicio.\nelemento1, elemento2, ...: Elementos a agregar en la posición de inicio (opcional).\n\n1. Eliminar elementos\nElimina elementos del array a partir de un índice específico:\n<code>\nlet arr = [1, 2, 3, 4, 5];\narr.splice(2, 2);  // A partir del índice 2, elimina 2 elementos\nconsole.log(arr);  // [1, 2, 5]\n</code>\n\n2. Reemplazar elementos\nReemplaza elementos del array a partir de un índice específico:\ncode/\nlet arr = [1, 2, 3, 4, 5];\narr.splice(1, 2, 'a', 'b');  // A partir del índice 1, elimina 2 elementos y añade 'a' y 'b'\nconsole.log(arr);  // [1, 'a', 'b', 4, 5]\n/code\n\n3. Agregar elementos\nAgrega elementos al array sin eliminar ningún elemento existente:\ncode/\nlet arr = [1, 2, 3, 4, 5];\narr.splice(3, 0, 'x', 'y');  // En el índice 3, no elimina nada y añade 'x' y 'y'\nconsole.log(arr);  // [1, 2, 3, 'x', 'y', 4, 5]\n/code",
      "video": "",
      "time": "",
      "okCounter": 2,
      "test": "learn"
    },
    {
      "id": "js13",
      "topic": "JS",
      "question": "¿Qué hace el método reverse en JavaScript?",
      "answer": "El método reverse en JavaScript invierte el orden de los elementos de un array in situ, modificando el array original.",
      "expanded": "El método reverse en JavaScript se utiliza para invertir el orden de los elementos de un array in situ, es decir, modifica el array original. No retorna un nuevo array, sino que altera el orden de los elementos del array existente.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js14",
      "topic": "JS",
      "question": "¿Cómo se utiliza el método join en JavaScript?",
      "answer": "El método join en JavaScript une todos los elementos de un array en una cadena de texto, separados por un separador especificado.",
      "expanded": "El método join en JavaScript se utiliza para concatenar todos los elementos de un array en una cadena de texto. Toma un parámetro opcional: el separador que se utiliza entre cada elemento. Retorna una cadena que contiene los elementos del array unidos por el separador especificado.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js15",
      "topic": "JS",
      "question": "¿Qué hace el método includes en JavaScript?",
      "answer": "El método includes en JavaScript verifica si un array incluye un determinado elemento, retornando true o false según el resultado.",
      "expanded": "Este método compara los elementos usando el operador de igualdad estricta (===).",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js16",
      "topic": "JS",
      "question": "¿Cuál es la diferencia entre los métodos flat y flatMap en JavaScript?",
      "answer": "El método flat en JavaScript crea un nuevo array con todos los elementos de un sub-array concatenados de manera superficial, mientras que flatMap primero mapea cada elemento usando una función y luego aplica flat para obtener un nuevo array unidimensional.",
      "expanded": "La diferencia entre flat y flatMap en JavaScript radica en su funcionamiento. El método flat se utiliza para crear un nuevo array con todos los elementos de un sub-array concatenados de manera superficial (por defecto, nivel de profundidad 1). En cambio, flatMap primero mapea cada elemento usando una función y luego aplica flat para obtener un nuevo array unidimensional.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js17",
      "topic": "JS",
      "question": "¿Qué hace el método findIndex en JavaScript?",
      "answer": "El método findIndex en JavaScript devuelve el índice del primer elemento de un array que cumple con una condición especificada por una función de prueba.",
      "expanded": "Retorna el índice del primer elemento que satisface la condición, o -1 si ninguno lo hace.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js18",
      "topic": "JS",
      "question": "Genera un array de 5x5 con todos los valores en 0 / luego cambia todos los valores por 5",
      "answer": "El método fill en JavaScript cambia todos los elementos de un array por un valor estático, desde un índice inicial hasta un índice final (no inclusivo).",
      "expanded": "Toma hasta tres parámetros: \n- el valor con el que se rellena el array\n- el índice inicial (por defecto, 0)\n- el índice final (por defecto, array.length). \n\narr.fill(valor, inicio, fin)\n\nRetorna el array modificado.\n\nconst multiplicationTable = new Array(5).fill(null).map(() => new Array(5).fill(0));",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js19",
      "topic": "JS",
      "question": "¿Qué hace la función Array.from en JavaScript?",
      "answer": "La función Array.from en JavaScript crea un nuevo array a partir de un objeto iterable o array-like, con la opción de aplicar un mapeo a cada elemento.",
      "expanded": "La función Array.from en JavaScript se utiliza para crear un nuevo array a partir de un objeto iterable o array-like. Permite especificar una función de mapeo opcional que se aplica a cada elemento del objeto iterable antes de agregarlo al nuevo array. Retorna un nuevo array basado en los elementos del objeto iterable.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js20",
      "topic": "JS",
      "question": "¿Cómo se verifica si una variable es un array en JavaScript?",
      "answer": "El método Array.isArray en JavaScript verifica si una variable es un array, retornando true si lo es y false si no.",
      "expanded": "El método Array.isArray en JavaScript se utiliza para verificar si una variable es un array. Retorna true si la variable es un array y false si no lo es. Es más confiable que usar typeof, especialmente cuando se trabaja con arrays que podrían haber sido creados en otros contextos de ejecución.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "js214",
      "topic": "ReactJs",
      "question": "¿Que es un debounce?",
      "answer": "Editar",
      "expanded": "Completar",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=18",
      "time": "1:55:26",
      "okCounter": 0
    },
    {
      "id": "js212",
      "topic": "ReactJs",
      "question": "Desahibilitar error de la próxima línea Eslint",
      "answer": "eslint-disable-next-line",
      "expanded": "eslint-disable-next-line es una directiva de ESLint que se utiliza para deshabilitar temporalmente una regla de ESLint en la siguiente línea de código. Esto puede ser útil cuando necesitas una excepción a una regla específica de ESLint en una situación particular sin deshabilitar la regla globalmente.\n\nUso de eslint-disable-next-line\nPara usar eslint-disable-next-line, simplemente añades un comentario en tu código justo antes de la línea que deseas excluir de la validación de ESLint. Puedes especificar una o más reglas que deseas deshabilitar.\n\n// eslint-disable-next-line no-console\n// eslint-disable-next-line no-console, no-unused-vars\n\nConsideraciones\nUsar con moderación: Las directivas como eslint-disable-next-line deben usarse con moderación. Si encuentras que necesitas deshabilitar reglas con frecuencia, es posible que desees revisar tus reglas de ESLint o tu código para asegurarte de que están alineados con las mejores prácticas.\nComentarios claros: Siempre es una buena práctica agregar un comentario explicativo sobre por qué estás deshabilitando una regla, para que otros desarrolladores (o tú mismo en el futuro) entiendan el contexto.\n",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "502e",
      "topic": "JS",
      "question": "¿Qué es un template string?",
      "answer": "También conocidos como template literals",
      "expanded": "En JavaScript, los template strings (también conocidos como template literals) son cadenas de texto delimitadas por comillas invertidas (`) que permiten la inclusión de expresiones incrustadas utilizando la sintaxis ${expresion}. Son útiles para crear cadenas dinámicas de forma más legible y conveniente.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "26ee",
      "topic": "JS",
      "question": "¿Qué es el spread operator?",
      "answer": "Es un operador que permite expandir una cadena o un objeto en un lugar donde se esperan 0 o más argumentos o elementos.",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&t=304s",
      "expanded": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "c09d",
      "topic": "JS",
      "question": "3-Funciones asíncronas y promesas",
      "expanded": "ver video y completar",
      "answer": "ver video y completar",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&t=340s",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "286d",
      "topic": "JS",
      "question": "13 Qué es y como funciona el método fetch?",
      "expanded": "Esto devuelve una promesa que resuelve al objeto Response que representa la respuesta a la solicitud realizada.\n\nUna promesa fetch() se rechaza con un TypeError cuando sucede un error en la red, que normalmente es un tema de permisos o similar. Una comprobación más precisa de una solicitud con fetch() debería comprobar que la promesa se resuelve, y que la propiedad Response.ok tiene valor true. Un estatus HTTP 404 no constituye un error de red.\n\nSintaxis: Promise<Response> fetch(input[, init]);\n\ninput: Define el recurso que se quiere solicitar.\ninit (Opcional): Objeto de opciones que contiene configuraciones para personalizar la solicitud. Estas opciones pueden ser:\n\n   method: El método de solicitud, p.ej., GET, POST.\n   headers: Cualquier cabecera que se quiera añadir a la solicitud, contenidas en un objeto Headers o un objeto literal con valores ByteString.\n   body: Cualquier cuerpo que se quiera añadir a la solicitud: puede ser un Blob, BufferSource, FormData, URLSearchParams, u objeto USVString. Nótese que las solicitudes con métodos GET o HEAD no pueden tener cuerpo.\n   mode: El modo a usar en la solicitud, p.ej., cors, no-cors, o same-origin.\n   credentials: Las credenciales que se quieran utilizar para la solicitud: omit, same-origin, o include. Para enviar automáticamente las cookies del dominio actual, debe indicarse esta opción. Desde Chrome 50, esta propiedad también acepta una instancia de FederatedCredential o de PasswordCredential.\n   cache: El modo de caché a utilizar en la solicitud: default, no-store, reload, no-cache, force-cache, o only-if-cached.\n   redirect: El modo de redirección a usar: follow (seguir redirecciones automáticamente), error (abortar si sucede un error durante la redirección), o manual (gestionar redirecciones manualmente). El valor por defecto en Chrome es follow (hasta la versión 46 era manual).\n   referrer: Un USVString que especifique no-referrer, client, o una URL. El valor por defecto es client.\n   referrerPolicy: Especifica el valor de la cabecera HTTP referer. Puede ser no-referrer, no-referrer-when-downgrade, origin, origin-when-cross-origin, unsafe-url.\n   integrity: Contiene el valor de integridad de subrecurso (subresource integrity) de la solicitud (p.ej., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).\n   keepalive: La opción keepalive se puede usar para permitir que recurso dure más que la página. Las solicitudes con el indicador keepalive son un reemplazo de la API Navigator.sendBeacon().\n   signal: Una instancia de objeto AbortSignal; permite comunicarse con con una solicitud vigente y abortarla si se desea via AbortController.",
      "answer": "El método fetch() lanza el proceso de solicitud de un recurso de la red. ",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "748f",
      "topic": "JS",
      "question": "Eventos del DOM / Desarrolle un ejemplo",
      "expanded": "addEventListener: Asocia una función a un evento específico en un elemento. Permite agregar múltiples manejadores para el mismo evento en el mismo elemento.\n\nelement.addEventListener('click', function() {\n  console.log('Elemento clicado');\n});\n\nremoveEventListener: Elimina una función previamente asociada a un evento específico en un elemento. La función y el evento deben coincidir exactamente con los usados en addEventListener.\n\nfunction handleClick() {\n  console.log('Elemento clicado');\n}\n\nelement.addEventListener('click', handleClick);\nelement.removeEventListener('click', handleClick);\n\nUtilizar removeEventListener es importante por varias razones:\n\nPrevención de Fugas de Memoria: Si un evento sigue asociado a un elemento que ya no es necesario, puede provocar que el navegador no libere la memoria usada por ese elemento, causando fugas de memoria.\n\nMejora del Rendimiento: Mantener eventos innecesarios puede afectar el rendimiento de la aplicación, ya que cada evento innecesario implica una ejecución adicional de código que consume recursos.\n\nEvitar Comportamiento Inesperado: Si se añaden múltiples manejadores al mismo evento sin eliminarlos adecuadamente, puede llevar a la ejecución de funciones múltiples veces, causando efectos no deseados en la aplicación.\n\nControl y Limpieza del Código: Gestionar adecuadamente los eventos garantiza que el código sea más limpio y más fácil de mantener, evitando manejadores de eventos redundantes.\n\nDe esta manera, te aseguras de que el manejador solo se ejecute cuando realmente es necesario y liberas los recursos cuando ya no lo es.",
      "answer": "addEventListener y removeEventListener son métodos en JavaScript utilizados para gestionar eventos en elementos del DOM",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0",
      "time": "7:50",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "c38f",
      "topic": "JS",
      "question": "Operador nullish coallescing ??",
      "expanded": "",
      "answer": "Determina si un valor existe o no y en base a la evaluación asignar un valor por defecto",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&t=781s",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "f888",
      "topic": "JS",
      "question": "Operador optional chainig o \"Encadenamiento Opcional\"",
      "expanded": "El operador que utilizas en user?.id se llama \"Encadenamiento Opcional\" (Optional Chaining en inglés). Este operador (?.) permite acceder a las propiedades de un objeto de manera segura, sin tener que preocuparse por errores si alguna propiedad intermedia no está definida o es null.\n\n¿Cómo Funciona?\nEl operador de encadenamiento opcional ?. se detiene y devuelve undefined si la parte del objeto antes de ?. es null o undefined, en lugar de lanzar un error. Esto es especialmente útil para trabajar con objetos que pueden tener propiedades anidadas opcionales.",
      "answer": "user?.id",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&",
      "time": "13:54",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "5edb",
      "topic": "JS",
      "question": "2-localStotage",
      "expanded": "ver video y completar",
      "answer": "ver video y completar",
      "video": "https://www.youtube.com/watch?v=jJeWLNg0go0&",
      "time": "15:31",
      "okCounter": 0,
      "test": false
    },
    {
      "id": "bf81",
      "topic": "JS",
      "question": "Para que sirve el objeto set?",
      "expanded": "Set.prototype.size\nDevuelve el número de valores en el objeto Set.\n\nSet.prototype.add(value)\nAñade value al objeto Set. Devuelve el objeto Set con el valor añadido.\n\nSet.prototype.clear()\nElimina todos los elementos del objeto Set.\n\nSet.prototype.delete(value)\nElimina el elemento asociado a value y devuelve un booleano que afirma si un elemento se eliminó correctamente o no. Set.prototype.has(value) devolverá false después.\n\nSet.prototype.has(value)\nDevuelve un booleano que afirma si un elemento está presente con el valor dado en el objeto Set o no.\n\nconst mySet1 = new Set();\n\nmySet1.add(1); // Set [ 1 ]\nmySet1.add(5); // Set [ 1, 5 ]\nmySet1.add(5); // Set [ 1, 5 ]\nmySet1.add(\"algún texto\"); // Set [ 1, 5, 'algún texto' ]\nconst o = { a: 1, b: 2 };\nmySet1.add(o);\n\nmySet1.add({ a: 1, b: 2 }); // o está haciendo referencia a un objeto diferente,\n// por lo que está bien\n\nmySet1.has(1); // true\nmySet1.has(3); // false, ya que 3 no se ha agregado al conjunto\nmySet1.has(5); // true\nmySet1.has(Math.sqrt(25)); // true\nmySet1.has(\"Algún Texto\".toLowerCase()); // true\nmySet1.has(o); // true\n\nmySet1.size; // 5\n\nmySet1.delete(5); // elimina 5 del conjunto\nmySet1.has(5); // false, 5 ha sido eliminado\n\nmySet1.size; // 4, ya que acabamos de eliminar un valor\n\nconsole.log(mySet1);\n// imprime en consola Set(4) { 1, \"algún texto\", {…}, {…} } en Chrome",
      "answer": "El objeto Set le permite almacenar valores únicos de cualquier tipo, ya sea valores primitivos o referencias a objetos.",
      "video": "",
      "time": "",
      "okCounter": 0,
      "test": "learn"
    },
    {
      "id": "f20d",
      "topic": "ReactJs",
      "question": "SubComponentes",
      "expanded": "ver video",
      "answer": "ver video",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=15",
      "time": "18:24",
      "okCounter": 0
    },
    {
      "id": "b556",
      "topic": "ReactJs",
      "question": "Manejo de formulario no controlado",
      "expanded": "ver",
      "answer": "ver",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=15",
      "time": "37:37",
      "okCounter": 0
    },
    {
      "id": "cffa",
      "topic": "ReactJs",
      "question": "useRef detectar primera ejecución",
      "expanded": "ver",
      "answer": "ver",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=15",
      "time": "56:45 ",
      "okCounter": 0
    },
    {
      "id": "70d6",
      "topic": "CSS",
      "question": "quitar los puntos a la lista LSN",
      "expanded": "explayar",
      "answer": "list-style:none",
      "video": "",
      "time": "1:07:00",
      "okCounter": 1
    },
    {
      "id": "591f",
      "topic": "JS",
      "question": "4-Cómo hacer un fetching de datos?",
      "expanded": "explayar",
      "answer": "fetch(....",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=17",
      "time": "1:13:30",
      "okCounter": 0
    },
    {
      "id": "14ae",
      "topic": "JS",
      "question": "12 Cómo hacer un fetching de datos con async / await?",
      "expanded": "explayar",
      "answer": "fetch(....",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=17",
      "time": "1:19:10",
      "okCounter": 0
    },
    {
      "id": "f742",
      "topic": "ReactJs",
      "question": "useMemo vs useCallback",
      "expanded": "ver video",
      "answer": "ver video",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=18",
      "time": "1:52:29",
      "okCounter": 1
    },
    {
      "id": "5e63",
      "topic": "CSS",
      "question": "con que elementos html se arma una estructura",
      "expanded": "header\nmain\nsection\naside\nnav\nfooter\n",
      "answer": "Etiquetas importantes con semántica correcta",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=18",
      "time": "8:23",
      "okCounter": 0
    },
    {
      "id": "053f",
      "topic": "CSS",
      "question": "¿Qué son los frameworks class less?",
      "expanded": "ver video",
      "answer": "ver video",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=18",
      "time": "5:35",
      "okCounter": 1
    },
    {
      "id": "264f",
      "topic": "ReactJs",
      "question": "como implementar un servicio de fetch?",
      "expanded": "ver video",
      "answer": "Los objetos deben inicializarse como un objeto vacío y ",
      "video": "https://www.youtube.com/watch?v=GOEiMwDJ3lc&list=PLrxqk0jYtXF7H-a6jDOEnsuhQw4JF_kj-&index=18",
      "time": "1:18:02",
      "okCounter": 0
    },
    {
      "id": "a272",
      "topic": "ReactJs",
      "question": "como se setean las variables de entorno?",
      "expanded": "explayar",
      "answer": "responder",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "b1da",
      "topic": "ReactJs",
      "question": "como se gestionan los custom error",
      "expanded": "explayar",
      "answer": "responder",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "9a65",
      "topic": "JS",
      "question": "10 try... catch",
      "expanded": "try_statements: Las sentencias que serán ejecutadas.\ncatch: Sentencias que se ejecutan si una excepción es lanzada en el bloque try.\nfinally_statements: Sentencias que se ejecutan después de que se completa la declaración try . Estas sentencias se ejecutan independientemente de si una excepcion fue lanzada o capturada.\n\nAdemás se puede utilizar throw new Error(\"oops\") para lanzar una excepción personalizada.\n\ntry {\n    myroutine();  // puede lanzar tres tipos de excepciones\n} catch (e) {\n    if (e instanceof TypeError) {\n        // sentencias para manejar excepciones TypeError\n    } else if (e instanceof RangeError) {\n        // sentencias para manejar excepciones RangeError\n    } else if (e instanceof EvalError) {\n        // sentencias para manejar excepciones EvalError\n    } else {\n       // sentencias para manejar cualquier excepción no especificada\n       logMyErrors(e); // pasa el objeto de la excepción al manejador de errores\n}",
      "answer": "Es una estructura para gestionar excepciones. // Ejemplo de código",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "4669",
      "topic": "GIT",
      "question": "Incorporar contenido de un curso de git",
      "expanded": "incorporar",
      "answer": "incorporar",
      "video": "https://www.youtube.com/watch?v=9ZJ-K-zk_Go",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "522d",
      "topic": "CSS",
      "question": "ver documentacion",
      "expanded": "https://www.lenguajecss.com\nhttps://web.dev/learncss\nhttps://developer.mozilla.org/es/docs/Web/CSS",
      "answer": "sitios",
      "video": "https://www.youtube.com/watch?v=TlJbu0BMLaY",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "0e8e",
      "topic": "Otras",
      "question": "informacion de empresas",
      "expanded": "glassdoor",
      "answer": "glassdoor/manfred",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "3e31",
      "topic": "CSS",
      "question": "aspect-ratio",
      "expanded": "aspect-ratio",
      "answer": "aspect-ratio",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "ae7c",
      "topic": "JS",
      "question": "6 como generamos Id?",
      "expanded": "crypto.randomUUID(): Generar un UUID (Universally Unique Identifier) v4.\nSe utiliza para generar identificadores únicos que son adecuados para propósitos generales, como identificar recursos, transacciones, o cualquier otra entidad que necesite un identificador único.\n\nDevuelve una cadena que representa un UUID v4.\nLos UUIDs generados tienen el formato xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx donde x es cualquier dígito hexadecimal y y es un dígito hexadecimal que cumple ciertas restricciones para ser un UUID v4.\nEs simple de usar y garantiza unicidad sin necesidad de manejar arrays o convertir valores.",
      "answer": "crypto.randomUUID()",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "18f2",
      "topic": "JS",
      "question": "Cuales son los métodos principales para manejos de fecha en js?.. Ejemplos / Paso de un formato al otro...",
      "expanded": "new Date(): Crea un nuevo objeto de tipo Date que representa un punto en el tiempo. Puede ser utilizado para obtener una representación completa de la fecha y hora actuales, y proporciona varios métodos para manipular fechas.\n\nlet currentDate = new Date();\nconsole.log(currentDate); // Ejemplo de salida: 2024-07-15T12:34:56.789Z\nconsole.log(currentDate.getFullYear()); // Ejemplo de salida: 2024\nconsole.log(currentDate.getMonth()); // Ejemplo de salida: 6 (Julio, ya que los meses son base 0)\nconsole.log(currentDate.getDate()); // Ejemplo de salida: 15\n\nDate.now(): Devuelve el número de milisegundos transcurridos desde el 1 de enero de 1970 00:00:00 UTC (época Unix). Es útil para realizar cálculos con tiempo, como medir la duración de un evento o comparar tiempos.\n\nlet currentTimeInMs = Date.now();\nconsole.log(currentTimeInMs); // Ejemplo de salida: 1679602800000\n\nPaso de valores entre formas de trabajar.. \n\nconst newDate = new Date();\nconst milliseconds = newDate.getTime()\n-----------------------------------------------------------------------\nconst milliseconds = Date.now();\nconst newDate = new Date(milliseconds);\n",
      "answer": "Las dos formas de trabajar con fechas en JavaScript, new Date() y Date.now(), tienen propósitos y comportamientos diferentes:",
      "video": "",
      "time": "",
      "okCounter": 1
    },
    {
      "id": "0c13",
      "topic": "typescript",
      "question": "incorporar curso de typescript",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "9d65",
      "topic": "JS",
      "question": "11 en onSubmit, recuperar el valor de sólo un input para luego limpiar el input",
      "expanded": "event.preventDefault()\nconst {elements} = event.currentTarget\nconst input = elements.namedItem('item')   <-- Input con id item",
      "answer": "",
      "video": "https://www.youtube.com/watch?v=JW_x-Tq5Vt0",
      "time": "26:29",
      "okCounter": 0
    },
    {
      "id": "5715",
      "topic": "JS",
      "question": "a que se le llama hardcodear?",
      "expanded": "Problemas Asociados\n- Mantenimiento: Es más difícil cambiar los datos, ya que requeriría modificar el código fuente y recompilar o redistribuir la aplicación.\n- Flexibilidad: Reduce la flexibilidad de la aplicación, ya que no permite ajustar los datos en tiempo de ejecución.\n- Escalabilidad: Puede ser menos escalable si se necesita cambiar los datos para diferentes entornos (por ejemplo, desarrollo, prueba, producción).\n- Errores: Aumenta el riesgo de errores, ya que los datos podrían estar duplicados en varios lugares del código.\n\nBuenas Prácticas\nPara evitar hardcodear datos, se recomienda:\n- Utilizar archivos de configuración.\n- Almacenar datos en bases de datos.\n- Utilizar variables de entorno.\n- Crear constantes o utilizar recursos externos para obtener datos.\n",
      "answer": "Se refiere a la práctica de incrustar datos directamente en el código fuente en lugar de obtener esos datos de una fuente externa o calcularlos de manera dinámica.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "7406",
      "topic": "HTML",
      "question": "Cual es la estructura que debe tener un formulario",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "5747",
      "topic": "HTML",
      "question": "Cual es la estructura que debe tener un formulario",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "bbda",
      "topic": "ReactNative",
      "question": "Cómo se inicializa un proyecto con expo",
      "expanded": "Además se le puede agregar la opción -template blank  para que sea un proyecto básico\n\nse lo levanta con npm start y allí te da la posibilidad de abrir diferentes simuladores y el entorno de web no está disponible.",
      "answer": "npx create-expo-app@latest [nombre del proyecto]",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "36:30",
      "okCounter": 0
    },
    {
      "id": "657b",
      "topic": "ReactNative",
      "question": "En un proyecto con template blank, ¿Cómo se habilita la web?",
      "expanded": "",
      "answer": "npx expo install react-dom react-native-web @expo/metro-runtime",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "39:47",
      "okCounter": 0
    },
    {
      "id": "3617",
      "topic": "ReactNative",
      "question": "Qué bloque funciona como un div?",
      "expanded": "Tiene la particularidad que son display: flex por defecto",
      "answer": "para representar cualquier bloque que querramos que se comparta como un div utilizamos la etiqueta View",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "41:55",
      "okCounter": 0
    },
    {
      "id": "05aa",
      "topic": "ReactNative",
      "question": "¿Cómo se incorporan los textos?",
      "expanded": "",
      "answer": "Los textos se representan indefectiblemente con la etiqueta Text",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "42:36",
      "okCounter": 0
    },
    {
      "id": "8017",
      "topic": "ReactNative",
      "question": "¿Cómo es la gestión de estilos?",
      "expanded": "El componente se lo importa al igual que View o Text.\n\nvar style = StyleSheet.create({\n  container:{\n    color:black\n  }\n})\n\n<View style={style.container}>\n<Text>EJEMPLO</Text>\n</View>",
      "answer": "Con el componente StyleSheet",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "43:02",
      "okCounter": 0
    },
    {
      "id": "3262",
      "topic": "ReactNative",
      "question": "¿Cómo se muestran imágenes?",
      "expanded": "import icon from '../assets/icon.png'\n\n<Image source={icon} style={{with:100, height:100}}>\n\n* para imagenes externas se debe especificar en el source su ubicación con la propiedad uri y además se debe especificar el tamaño sino no aparecerá.\nel valor del tamaño (en este caso 100) son pixeles en resolución efectiva\n\nresizeMode sirve para determinar como se muestra la imagen:\n- center: en el centro\n- contain: se adapta al contenedor sin variar su aspecto\n- cover: se estira\n- repeat: se repite si tiene espacio\n- stretch: se estira",
      "answer": "con el componente <Image>",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "44:04",
      "okCounter": 0
    },
    {
      "id": "2ee4",
      "topic": "ReactNative",
      "question": "¿Cómo añadir linter?",
      "expanded": "Este comando inicializa la configuración de lint, instala las dependencias y crea los archivos de configuración\n\nPara además añadir prettier \nnpx expo install -- --save-dev prettier eslint-config-prettier eslint-plugin-prettier\n\nY para configurarlo modificamos el archivo eslintrs.js\nmodule.export = {\n  extends: ['expo','prettier'´],  // Extendiendo configuración eslint-config-prettier\n  plugins: ['prettier'], // Extendiendo plugin eslint-plugin-prettier\n  rules: {\n    'prettier/prettier': 'error' //Todas las reglas de prettier que dan error\n  }\n}\n\nTambién se deben agregar las extensiones de prettier y eslint y, por último, es recomendable activar la opción \nEslint > Code action on save: all",
      "answer": "npx expo lint",
      "video": "https://www.youtube.com/watch?v=U23lNFm_J70",
      "time": "1:03:51",
      "okCounter": 0
    },
    {
      "id": "e34f",
      "topic": "JS",
      "question": "const celsiusTemperatures = [0, 20, 30, 40]\nPasa estas temperaturas de grados Celsius a grados Fahrenheit; El cálculo es (tempCelsius* 9/5) + 32",
      "expanded": "  const celsiusTemperatures = [0, 20, 30, 40];\n  const fahrenheitTemperatures = celsiusTemperatures.map(temp => (temp * 9/5) + 32);",
      "answer": "Para hacer esto utilizamos el método map.",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "f80f",
      "topic": "JS",
      "question": "Generar una URL de Consulta a Partir de Parámetros\nconst queryParams = ['search=react', 'page=2', 'sort=asc']",
      "expanded": "const queryString = queryParams.join('&');\nconst url = `https://api.example.com/items?${queryString}`;",
      "answer": "Para hacer esto utilizaremos el método join",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "3cfa",
      "topic": "JS",
      "question": "const products = ['Product1', 'Product2', 'Product3', 'Product4', 'Product5', 'Product6', 'Product7'];\nDebes obtener los primeros 4 productos",
      "expanded": "const firstFiveProducts = products.slice(0, 5);\n",
      "answer": "Para ello utilizaremos el método slice",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "7028",
      "topic": "JS",
      "question": "Paginación de a 5 elementos.\n\nconst items = ['Item1', 'Item2', 'Item3', 'Item4', 'Item5', 'Item6', 'Item7', 'Item8', 'Item9', 'Item10', 'Item11', 'Item12', 'Item13', 'Item14', 'Item15', 'Item16'];\n\nTienes que desarrollar una función a la cual le pases todos los items y el número de página y te debe retornar los elementos correspondientes.\n",
      "expanded": "function paginate (items, page){\n  const itemsPerPage = 5;\n  const startIndex = (page - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentItems = items.slice(startIndex, endIndex);\n  return currentItems  \n}",
      "answer": "La solución la planteamos con el métido slice",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "b105",
      "topic": "JS",
      "question": "const items = ['Item1', 'Item2', 'Item3', 'Item4', 'Item5', 'Item6', 'Item7', 'Item8', 'Item9', 'Item10'];\n\nDe este array necesitamos los últimos 5 elementos",
      "expanded": "const items = ['Item1', 'Item2', 'Item3', 'Item4', 'Item5', 'Item6', 'Item7', 'Item8', 'Item9', 'Item10'];\nconst last5Items = items.slice(-5)",
      "answer": "Para esto utilizaremos el métido slice",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "1a24",
      "topic": "JS",
      "question": "  const products = [\n    { name: 'Laptop', category: 'Electronics' },\n    { name: 'Shoes', category: 'Fashion' },\n    { name: 'Smartphone', category: 'Electronics' },\n    { name: 'Jacket', category: 'Fashion' },\n    { name: 'Headphones', category: 'Electronics' }\n  ];\nSe deben mostrar sólo los productos de la categoría \"Electronics\"",
      "expanded": "  const products = [\n    { name: 'Laptop', category: 'Electronics' },\n    { name: 'Shoes', category: 'Fashion' },\n    { name: 'Smartphone', category: 'Electronics' },\n    { name: 'Jacket', category: 'Fashion' },\n    { name: 'Headphones', category: 'Electronics' }\n  ];\n\nconst filtred = products.filter (product => product.category ==='Electronics')",
      "answer": "Esto lo hacemos con el método filter",
      "video": "",
      "time": "",
      "okCounter": 2,
      "test": "learn"
    },
    {
      "id": "1e97",
      "topic": "JS",
      "question": "  const [tasks, setTasks] = useState([\n    { id: 1, text: 'Do laundry', completed: false },\n    { id: 2, text: 'Buy groceries', completed: true },\n    { id: 3, text: 'Clean the house', completed: false }\n  ]);\nSe deben mostrar las tareas no completadas",
      "expanded": "  const [tasks, setTasks] = useState([\n    { id: 1, text: 'Do laundry', completed: false },\n    { id: 2, text: 'Buy groceries', completed: true },\n    { id: 3, text: 'Clean the house', completed: false }\n  ]);\nconst toDo = tasks.filter(task=>!task.completed)",
      "answer": "Lo implementamos con el método filter",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "cb79",
      "topic": "JS",
      "question": "const users = ['John Doe', 'Jane Smith', 'Emily Jones', 'Michael Brown'];\n\nSe debe buscar aquellos nombre que coincidan con el contenido de la variable searchUser",
      "expanded": "  const filteredUsers = users.filter(user => user.toLowerCase().includes(searchTerm.toLowerCase()));",
      "answer": "Lo implementamos con el método filter y el método includes",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "18f8",
      "topic": "HTML",
      "question": "Cómo es la estructura básica de una página web",
      "expanded": "<!doctype html>\n<html>\n<head>\n<title>Hello world!</title>\n</head>\n<body>\n<header>\n<img src=\"logo.png\">\n<h1>Awesome page</h1>\n</header>\n<nav>\n<ul>\n<li><a href=\"#\">About</a></li>\n<li><a href=\"#\">Blog</a></li>\n<li><a href=\"#\">Other link</a></li>\n</ul>\n</nav>\n<section>\n<article>\n<header>\n</article>\n<article>\n<h1>Post title</h1>\n<h2>Subtitle and info</h2>\n</header>\n<p>Content goes here.</p>\n<!- Another article here\n</article>\n</section>\n<aside>\n<h2>About section</h2>\n<p>Donec eu libero sit amet quam.</p>\n</aside>\n<footer>That's all folks!</footer>\n</body>\n</html>",
      "answer": "",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "4b15",
      "topic": "JS",
      "question": "const categories = [\n    ['Laptop', 'Smartphone', 'Tablet'],\n    ['Shoes', 'Sneakers', 'Boots'],\n    ['Headphones', 'Earphones']\n  ];\n\nUnifica todas las categorías en una sola lista.",
      "expanded": "  const categories = [\n    ['Laptop', 'Smartphone', 'Tablet'],\n    ['Shoes', 'Sneakers', 'Boots'],\n    ['Headphones', 'Earphones']\n  ];\n\n  const allProducts = categories.flat();\n",
      "answer": "Se implementa con el método flat",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "cc35",
      "topic": "JS",
      "question": "const posts = [\n    {\n      id: 1,\n      title: 'Post 1',\n      comments: ['Comment 1.1', 'Comment 1.2']\n    },\n    {\n      id: 2,\n      title: 'Post 2',\n      comments: ['Comment 2.1', 'Comment 2.2', 'Comment 2.3']\n    },\n    {\n      id: 3,\n      title: 'Post 3',\n      comments: ['Comment 3.1']\n    }\n  ];\n\nUnifica todos los comentarios de los diferentes post en una solo array.",
      "expanded": "const posts = [\n    {\n      id: 1,\n      title: 'Post 1',\n      comments: ['Comment 1.1', 'Comment 1.2']\n    },\n    {\n      id: 2,\n      title: 'Post 2',\n      comments: ['Comment 2.1', 'Comment 2.2', 'Comment 2.3']\n    },\n    {\n      id: 3,\n      title: 'Post 3',\n      comments: ['Comment 3.1']\n    }\n  ];\n\n  const allComments = posts.flatMap(post => post.comments);",
      "answer": "Lo implementaremos con el método flatMap",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "4d07",
      "topic": "JS",
      "question": "Crea una función que permita crear arrays que contengan los números de 1 a la longitud del array",
      "expanded": "function createArray(lenght){\n return Array.from({ length}, (_, i) => i + 1)\n}",
      "answer": "Lo implementamos con Array.from",
      "video": "",
      "time": "",
      "okCounter": 1,
      "test": "learn"
    },
    {
      "id": "b6ea",
      "topic": "JS",
      "question": "Estas creando una lista de tareas y necesitas generar un ID para cada nuevo items.",
      "expanded": "const tasks = [\n    { id: crypto.randomUUID(), text: 'Do laundry' },\n    { id: crypto.randomUUID(), text: 'Buy groceries' }\n  ]",
      "answer": "Lo más adecuado es utilizar crypto.randomUUID()",
      "video": "",
      "time": "",
      "okCounter": 0,
      "test": "learn"
    },
    {
      "id": "01ec",
      "topic": "JS",
      "question": "Que hace el método findIndex?",
      "expanded": "Si ningún elemento cumple con la condición, devuelve -1.\n\narray.findIndex(callback(element, index, array), thisArg)\n\ncallback: Función que se ejecuta en cada elemento del array hasta que se encuentre uno que cumpla la condición. Recibe tres argumentos:\nelement: El elemento actual del array.\nindex: El índice del elemento actual.\narray: El array sobre el cual se llamó findIndex.\nthisArg (opcional): Valor a usar como this al ejecutar el callback.\n",
      "answer": "El método findIndex en JavaScript es utilizado para encontrar el índice del primer elemento en un array que satisface una condición especificada en una función de prueba.",
      "video": "",
      "time": "",
      "okCounter": 0,
      "test": "learn"
    },
    {
      "id": "c635",
      "topic": "JS",
      "question": "const tasks = [\n    { id: 142, text: 'Do laundry' },\n    { id: 112, text: 'Buy groceries' },\n    { id: 313, text: 'Clean the house' }\n  ]\n\nhaz una función a la cual, pasándole el Id devuelva el índice de la tarea",
      "expanded": "const tasks = [\n    { id: 142, text: 'Do laundry' },\n    { id: 112, text: 'Buy groceries' },\n    { id: 313, text: 'Clean the house' }\n  ]\n\nfunction taskIndex (id){\nreturn tasks.findIndex(task => task.id ===id)\n}",
      "answer": "Lo resolvemos con findIndex",
      "video": "",
      "time": "",
      "okCounter": 0,
      "test": "learn"
    },
    {
      "id": "d5e8",
      "topic": "JS",
      "question": "const products = [\n    { id: 1, name: 'Laptop', price: 40 },\n    { id: 2, name: 'Smartphone', price: 500 },\n    { id: 3, name: 'Headphones', price: 100 }\n  ]\nconst users = [\n    { id: 1, name: 'Ángel María'},\n    { id: 2, name: 'Aana' },\n    { id: 3, name: 'José' }\n]\n// Tareas: \n// 1- ordena los productos por precio\n// 2- ordena los usuarios por nombre\n// 3- ordena los usuarios en orden aleatorio",
      "expanded": "const products = [\n    { id: 1, name: 'Laptop', price: 1000 },\n    { id: 2, name: 'Smartphone', price: 500 },\n    { id: 3, name: 'Headphones', price: 100 }\n  ]\nconst sortedProducts = [...products].sort((a, b) => a.price - b.price)\nconst sortedUsers = [...users].sort((a, b) => a.name.localeCompare(b.name));\nconst randomSortedUsers = [...users].sort(() => Math.random()-0.5);\n",
      "answer": "Lo haremos utilizando el método sort",
      "video": "",
      "time": "",
      "okCounter": 0,
      "test": "learn"
    },
    {
      "id": "cbf1",
      "topic": "JS",
      "question": "16 Para que se utiliza el método localeCompare?",
      "expanded": "Esto es particularmente útil para ordenar cadenas de texto en una manera que respete las convenciones de diferentes idiomas y alfabetos.\n\nstr1.localeCompare(str2, locales, options)\n\nstr1: La cadena que llama al método.\nstr2: La cadena contra la que se compara.\nlocales (opcional): Una cadena con una configuración regional (por ejemplo, \"en-US\", \"fr\") o un array de dichas cadenas. Si no se proporciona, se utilizará la configuración regional predeterminada del entorno.\noptions (opcional): Un objeto que contiene propiedades para personalizar la comparación.\n\n\nDevuelve un número:\nNegativo si str1 debe ir antes que str2.\nCero si str1 y str2 son equivalentes.\nPositivo si str1 debe ir después que str2.\n\nSensibilidad\nEl parámetro options permite ajustar la sensibilidad de la comparación. Por ejemplo:\n\nsensitivity: 'base': Considera solo las diferencias básicas (ignora mayúsculas y acentos).\nsensitivity: 'accent': Considera las diferencias de acentos (ignora mayúsculas).\nsensitivity: 'case': Considera las diferencias de mayúsculas (ignora acentos).\nsensitivity: 'variant': Considera todas las diferencias (mayúsculas, acentos, etc.).\n",
      "answer": "El método localeCompare en JavaScript se utiliza para comparar dos cadenas de texto según las reglas de la configuración regional actual o una configuración regional específica. ",
      "video": "",
      "time": "",
      "okCounter": 0
    },
    {
      "id": "f83c",
      "topic": "JS",
      "question": "?? cómo se llama este operador y para que sirve?",
      "expanded": "Es especialmente útil para definir valores por defecto.",
      "answer": "El operador nullish coalescing (??) (de coalescencia nula) es un operador lógico que retorna el operando de lado derecho cuando el operando de lado izquierdo es null o undefined, y en caso contrario retorna el operando de lado izquierdo.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "dc37",
      "topic": "JS",
      "question": "user?.id como se llama este operador?",
      "expanded": "Este operador (?.) permite acceder a las propiedades de un objeto de manera segura, sin tener que preocuparse por errores si alguna propiedad intermedia no está definida o es null.\n\n¿Cómo Funciona?\nEl operador de encadenamiento opcional ?. se detiene y devuelve undefined si la parte del objeto antes de ?. es null o undefined, en lugar de lanzar un error. Esto es especialmente útil para trabajar con objetos que pueden tener propiedades anidadas opcionales",
      "answer": "se llama \"Encadenamiento Opcional\" (Optional Chaining en inglés)",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "75f5",
      "topic": "JS",
      "question": "9 Cómo generar números aleatorios seguros. \n",
      "expanded": "crypto.getRandomValues(): Generar números aleatorios criptográficamente seguros.\nSe utiliza principalmente para generar arrays de valores enteros aleatorios. Es útil cuando necesitas una secuencia de bytes aleatorios, como para claves de cifrado, tokens, o salting de contraseñas.\n\nAcepta un array tipado y lo llena con valores aleatorios.\nLos valores generados son adecuados para usos criptográficos porque tienen una alta entropía y no son predecibles.\nLos arrays tipados compatibles incluyen Uint8Array, Uint16Array, Uint32Array, y sus versiones BigInt.",
      "answer": "crypto.getRandomValues(): Generar números aleatorios criptográficamente seguros.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "e551",
      "topic": "Testing",
      "question": "documentar",
      "expanded": "",
      "answer": "",
      "video": "https://www.youtube.com/watch?v=JW_x-Tq5Vt0",
      "time": "44:51",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "4f01",
      "topic": "JS",
      "question": "7 function obtenerDatosPromise(callback){\n  setTimeout(()=>{\n    callback(null,{data:'datos importados'})\n  },200)\n}\n// modifica esta funcion para que funcione con promesas y además llamarla con then y con await ",
      "expanded": "function obtenerDatosPromise(){\n  return new Promise((resolve)=>{\n    setTimeout(()=>{\n      resolve({data:'datos importados'})\n    },200)\n  })\n}\n//then\nobtenerDatosPromise()\n  .then(info=>{\n    console.log(info)\n  })\n\n// await\nconst info = await obtenerDatosPromise()\nconsole.log(info)",
      "answer": "lo resolvemos devolviendo una promesa y esta sería la implementación",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "16c3",
      "topic": "ReactJs",
      "question": "Mencione hooks de react **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "f7ba",
      "topic": "ReactJs",
      "question": "Componentes controlador y no controlados **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "b834",
      "topic": "ReactJs",
      "question": "Que son los props? **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "8b0a",
      "topic": "ReactJs",
      "question": "Que es un state manager? **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "ade3",
      "topic": "ReactJs",
      "question": "Local state vs global state? **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "0719",
      "topic": "ReactJs",
      "question": "Que es JSX? **************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "7433",
      "topic": "ReactJs",
      "question": "Qué es el DOM? *******",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "63cf",
      "topic": "ReactJs",
      "question": "Qué es el DOM",
      "expanded": "Es una interfaz de programación que nos permite crear, cambiar, o remover elementos del documento. También podemos agregar eventos a esos elementos para hacer más dinámica nuestra página.\n\nEl DOM visualiza el documento de HTML como un árbol de tres nodos. Un nodo representa un documento de HTML.\n\n",
      "answer": "DOM significa Document Object Model, en español sería Modelo de Objetos del Documento",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "e6f6",
      "topic": "JS",
      "question": "1-que es el scope?",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "re-evaluation",
      "okCounter": 0
    },
    {
      "id": "14ee",
      "topic": "JS",
      "question": "5-Closures?",
      "expanded": "En otras palabras, un closure te da acceso al alcance de una función externa desde una función interna. En JavaScript, los closure se crean cada vez que se crea una función, en el momento de la creación de la función.\n\n",
      "answer": "Un closure es la combinación de una función agrupada (dentro de otra) con referencias a su estado adyacente (el entorno léxico). ",
      "video": "https://developer.mozilla.org/es/docs/Web/JavaScript/Closures",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "95f7",
      "topic": "JS",
      "question": "14 callback",
      "expanded": "las callbacks a menudo se utilizan para continuar con la ejecución del código después de que se haya completado una operación a sincrónica — estas se denominan devoluciones de llamada asincrónicas\n",
      "answer": "Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o acción.",
      "video": "https://developer.mozilla.org/es/docs/Glossary/Callback_function",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "60d7",
      "topic": "JS",
      "question": "15 Que son las promesas?",
      "expanded": "Esencialmente, una promesa es un objeto devuelto al cual se adjuntan funciones callback, en lugar de pasar callbacks a una función.",
      "answer": "Una Promise (promesa en castellano) es un objeto que representa la terminación o el fracaso de una operación asíncrona.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "6104",
      "topic": "JS",
      "question": "8 diferencias entre promise y async /await",
      "expanded": "Promesas: Son más verbosas y pueden resultar en un código menos legible, especialmente con múltiples operaciones asíncronas encadenadas. Son útiles y siguen siendo ampliamente utilizadas.\nasync/await: Ofrecen una sintaxis más limpia y legible para manejar la asincronía. Facilitan el manejo de errores y hacen que el código asíncrono se parezca más al código sincrónico.\n",
      "answer": "Las diferencias entre Promise y async/await en JavaScript son principalmente sintácticas y de legibilidad, aunque ambos manejan la asincronía de manera efectiva",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "2f84",
      "topic": "Otras",
      "question": "Que es React?",
      "expanded": "Especialmente para aplicaciones web de una sola página (SPA). Fue desarrollada por Facebook y lanzada por primera vez en 2013. React se centra en la creación de componentes reutilizables que componen la interfaz de usuario.\n\nCaracterísticas Principales de React\n\n* Componentes:\n\nReact está basado en componentes. Los componentes son bloques de construcción reutilizables que pueden tener su propio estado y lógica.\nUn componente puede ser una clase (class component) o una función (functional component).\n\n* JSX:\nJSX (JavaScript XML) es una extensión de sintaxis para JavaScript que se usa con React. Permite escribir HTML dentro de JavaScript, lo que hace que el código sea más legible y fácil de entender.\n\n*Estado (State) y Props:\n\nEl estado es un objeto que representa las propiedades dinámicas del componente y puede cambiar con el tiempo.\nLas props (propiedades) son parámetros que se pasan a los componentes y son inmutables.\n\n* Virtual DOM:\nReact utiliza un Virtual DOM (Document Object Model) para mejorar el rendimiento. El Virtual DOM es una representación ligera del DOM real que React usa para hacer actualizaciones eficientes.\nCuando el estado o las props cambian, React crea un nuevo Virtual DOM y lo compara con el anterior (diffing). Solo las diferencias se aplican al DOM real, lo que minimiza las manipulaciones del DOM y mejora el rendimiento.\n\n* Unidirectional Data Flow:\nReact sigue un flujo de datos unidireccional, lo que significa que los datos fluyen en una sola dirección, de los componentes padres a los hijos. Esto hace que la aplicación sea más predecible y fácil de depurar.\n\n* Ecosistema y Herramientas:\nReact tiene un ecosistema amplio que incluye bibliotecas como React Router para el manejo de rutas, Redux para la gestión del estado global, y herramientas como Create React App para iniciar proyectos rápidamente.\nReact Native, una extensión de React, permite construir aplicaciones móviles para iOS y Android usando los mismos principios que React.\n\nVentajas de Usar React\nModularidad: Los componentes permiten construir interfaces de usuario complejas a partir de piezas pequeñas y reutilizables.\nRendimiento: El uso del Virtual DOM mejora la eficiencia y el rendimiento de las actualizaciones de la interfaz de usuario.\nComunidad y Ecosistema: React tiene una gran comunidad de desarrolladores y una amplia variedad de bibliotecas y herramientas disponibles.\nDesarrollo Móvil: Con React Native, puedes usar tus conocimientos de React para construir aplicaciones móviles nativas.\n\nConclusión\nReact es una poderosa biblioteca de JavaScript que simplifica el desarrollo de interfaces de usuario mediante el uso de componentes, JSX, y un enfoque eficiente para la actualización del DOM. Su adopción generalizada y su ecosistema robusto lo convierten en una opción popular para el desarrollo de aplicaciones web y móviles modernas.",
      "answer": "React es una biblioteca de JavaScript para construir interfaces de usuario.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "b74b",
      "topic": "ReactJs",
      "question": "como se llama el algoritmo de react para actualizar el dom?",
      "expanded": "El algoritmo que React utiliza para actualizar el DOM se llama \"reconciliación\". Este proceso involucra el uso de un Virtual DOM para hacer las actualizaciones de manera eficiente. El algoritmo en sí se conoce comúnmente como el \"algoritmo de diffing\" o \"algoritmo de diferenciación\".\n\nReconciliación y el Algoritmo de Diffing\n\n* Virtual DOM:\nEl Virtual DOM es una representación ligera del DOM real. Es un árbol de objetos de JavaScript que actúa como una copia en memoria del DOM real.\nCada vez que el estado de una aplicación cambia, React crea un nuevo árbol del Virtual DOM.\n\n* Diffing:\nReact compara el nuevo árbol del Virtual DOM con el árbol anterior utilizando su algoritmo de diffing. Este algoritmo identifica las diferencias (diffs) entre los dos árboles.\nReact determina las operaciones mínimas necesarias para transformar el árbol anterior en el nuevo árbol. Estas operaciones se aplican luego al DOM real.\n\n* Actualización del DOM:\nUna vez que React identifica las diferencias, actualiza eficientemente el DOM real solo en las partes que han cambiado. Esto minimiza las manipulaciones del DOM, lo que es costoso en términos de rendimiento.\nPrincipios del Algoritmo de Diffing de React\n\n* Comparación de Nodos del Mismo Nivel:\nReact compara los nodos del mismo nivel en el árbol del DOM. Si los nodos tienen diferentes tipos (por ejemplo, un <div> reemplazado por un <span>), React elimina el nodo antiguo y crea uno nuevo.\nSi los nodos tienen el mismo tipo, React compara sus atributos y actualiza solo los que han cambiado.\n\n* Key Prop:\nPara mejorar la eficiencia, especialmente en listas de elementos, React utiliza una propiedad especial llamada key. Las keys ayudan a identificar qué elementos han cambiado, han sido agregados o eliminados.\nLas keys deben ser únicas entre los hermanos (siblings) en la misma lista.\n\n* Manejo de Componentes:\nCuando React encuentra un componente de clase o funcional, vuelve a renderizar ese componente y recurre al algoritmo de diffing para sus hijos.\nSi un componente recibe nuevas props o su estado cambia, React actualiza solo las partes del DOM que han cambiado en función de la nueva salida del renderizado.\n\nConclusión\nEl algoritmo de diffing de React, parte de su proceso de reconciliación, es fundamental para las actualizaciones eficientes del DOM. Al utilizar un Virtual DOM y comparar las diferencias, React minimiza las manipulaciones directas del DOM, mejorando así el rendimiento y la experiencia del usuario.",
      "answer": "El algoritmo en sí se conoce comúnmente como el \"algoritmo de diffing\" o \"algoritmo de diferenciación\".",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "5e7b",
      "topic": "ReactJs",
      "question": "diferencias entre una props y state en un componente de react?",
      "expanded": "Props: Son inmutables y se utilizan para pasar datos de un componente a otro. Son establecidas por el componente padre y accesibles en el componente hijo.\nState: Es mutable y se usa para manejar datos internos del componente que pueden cambiar con el tiempo. Es definido y gestionado dentro del mismo componente.\nAmbos conceptos son esenciales para construir aplicaciones dinámicas y reactivas con React",
      "answer": "En React, props y state son dos conceptos fundamentales que gestionan datos y cómo se transmiten o se manejan dentro de los componentes.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "2b78",
      "topic": "ReactJs",
      "question": "como se determina si un valor se pasa como props a un componente hijo o se lo maneja allí como estado?",
      "expanded": "Resumen de Decisión\n¿El valor es inmutable dentro del componente hijo?\n\nSí: Usar props.\nNo: Considerar state.\n¿El valor se modifica dentro del componente?\n\nSí: Usar state.\nNo: Usar props.\n¿El valor es necesario para configurar el componente hijo desde el padre?\n\nSí: Usar props.\nNo: Evaluar si es un estado local.\n¿El valor está relacionado con interacciones del usuario o datos que cambian con el tiempo?\n\nSí: Usar state.\nSiguiendo estas pautas, podrás diseñar componentes React que sean más fáciles de entender, mantener y reutilizar.\n\n\n\n\n\n\n",
      "answer": "Determinar si un valor debe pasarse como props a un componente hijo o manejarse como state dentro del componente es fundamental para diseñar componentes React eficientes y fáciles de mantener. Aquí hay algunas pautas para tomar esta decisión:",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "3f5c",
      "topic": "ReactJs",
      "question": "como se determina si un valor se pasa como props a un componente hijo o se lo maneja allí como estado?",
      "expanded": "* ¿El valor es inmutable dentro del componente hijo?\nSí: Usar props.\nNo: Considerar state.\n\n* ¿El valor se modifica dentro del componente?\nSí: Usar state.\nNo: Usar props.\n\n* ¿El valor es necesario para configurar el componente hijo desde el padre?\nSí: Usar props.\nNo: Evaluar si es un estado local.\n\n* ¿El valor está relacionado con interacciones del usuario o datos que cambian con el tiempo?\nSí: Usar state.",
      "answer": "Determinar si un valor debe pasarse como props a un componente hijo o manejarse como state dentro del componente es fundamental para diseñar componentes React eficientes y fáciles de mantener.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "d1db",
      "topic": "JS",
      "question": "const fruits = ['apple', 'banana', 'apple', 'orange', 'banana']\n\nCrea un array con los valores únicos.",
      "expanded": "  const uniqueItems = Array.from(new Set(items));",
      "answer": "Utilizaremos set",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "8609",
      "topic": "JS",
      "question": "19 - Para que sirve el método pop() / desarrollar ejemplo",
      "expanded": "const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];\nconsole.log(plants.pop());\n// Expected output: \"tomato\"\n",
      "answer": "El método pop elimina el último elemento de un array y devuelve su valor al método que lo llamó",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "1a15",
      "topic": "JS",
      "question": "18 - const myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\n// Elimine el último elemento del arreglo",
      "expanded": "const myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst popped = myFish.pop(); // podemos recuperar el elemento en caso que sea necesario\nconsole.log(myFish); // ['angel', 'clown', 'mandarin' ]\nconsole.log(popped); // 'sturgeon'",
      "answer": "Lo hacemos con el método pop",
      "video": "",
      "time": "",
      "test": "test",
      "okCounter": 0
    },
    {
      "id": "024f",
      "topic": "JS",
      "question": "//Array.prototype.push(), Array.prototype.shift(), Array.prototype.unshift(), Array.prototype.concat(), Array.prototype.splice() \n//Para que sirven.. Ejemplo de cada uno...\nconsole.log()",
      "expanded": "El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.\n\nconst animals = ['pigs', 'goats', 'sheep'];\nconst count = animals.push('cows');\nconsole.log(count);\n\nEl método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.\n\nvar miPescado = [\"ángel\", \"payaso\", \"mandarín\", \"cirujano\"];\nconsole.log(\"miPescado antes: \" + miPescado);\n\nEl método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.\n\nconst array1 = [1, 2, 3];\nconsole.log(array1.unshift(4, 5));\n\nEl método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.\n\nconst array1 = ['a', 'b', 'c'];\nconst array2 = ['d', 'e', 'f'];\nconst array3 = array1.concat(array2);\nconsole.log(array3);\n\nEl método splice() cambia el contenido de un array agregando, quitando o cambiando elementos\n",
      "answer": "Aquí está la explicación de los métodos",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "3c83",
      "topic": "ReactJs",
      "question": "como se hace un history.back? ****************",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "f10e",
      "topic": "JS",
      "question": "Cómo leer los URL params desde JS? /  Ejemplo",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "e258",
      "topic": "JS",
      "question": "Cómo leer los URL params desde JS? /  Ejemplo",
      "expanded": "",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "658c",
      "topic": "JS",
      "question": "const url = 'https://www.ejemplo.com/page?nombre=Juan&edad=30&pais=Mexico';\nCómo leer los URL params desde JS? /  Ejemplo",
      "expanded": "https://www.ejemplo.com/page?nombre=Juan&edad=30&pais=Mexico\n\nconst urlParams = new URLSearchParams(queryString);\n// Puede aplicarse desde window.location.search // cadena tipo '?nombre=Juan&edad=30' // json // Array\n\nif (urlParams.has('nombre')) {\n    console.log('El parámetro \"nombre\" está presente.');\n} else {\n    console.log('El parámetro \"nombre\" no está presente.');\n}\n\nconst nombre = urlParams.get('nombre');\nconst edad = urlParams.get('edad');\nconst pais = urlParams.get('pais');\n\nconvertimos nuevamente a una URL\nconst fullUrl = `${baseUrl}?${urlParams.toString()}`;\n\nMETODOS DEL OBJETO\n.has(name)\n.append(name,value)\n.set(name,value)\n.delete(name)\n.forEach(callBack)\n.entries()\n.get(name)\n.getAll(name)\n.keys()\n.sort()\n.toString()",
      "answer": "con URLSearchParams // Que hace el método URLSearchParams?",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "c72b",
      "topic": "JS",
      "question": "Que es el objeto URL? // Ejemplo",
      "expanded": "const url = new URL('https://www.ejemplo.com:8080/path/page.html?query=123&lang=es#section');\n\nPROPIEDADES:\nhref: Devuelve la URL completa como una cadena de texto.\norigin: Devuelve el origen de la URL, que incluye el esquema, host y puerto.\nprotocol: Devuelve el protocolo de la URL (por ejemplo, http: o https:).\nhost: Devuelve el host de la URL, que incluye el nombre de dominio y el puerto si está especificado.\nhostname: Devuelve el nombre de dominio sin el puerto.\nport: Devuelve el número de puerto de la URL.\npathname: Devuelve el camino o ruta de la URL.\nsearch: Devuelve la cadena de consulta, que comienza con el signo de interrogación (?).\nhash: Devuelve la parte del fragmento de la URL, que comienza con la almohadilla (#).\nsearchParams: Devuelve un objeto URLSearchParams que representa los parámetros de consulta de la URL.\n\nMETODOS:\ntoString(): Devuelve la URL completa como una cadena de texto.\ntoJSON(): Devuelve la URL completa como una cadena JSON.\ncreateObjectURL(): Crea una URL temporal para un objeto de tipo File o Blob.\nrevokeObjectURL(): Revoca una URL creada previamente con createObjectURL().\nrelativize(): Devuelve una versión relativa de la URL en función de la URL base (a menudo no implementada en navegadores).\n\nconst url = new URL('https://www.ejemplo.com/path/page.html');\n\nurl.protocol = 'http:';\nurl.hostname = 'www.nuevoejemplo.com';\nurl.port = '8080';\nurl.pathname = '/nueva/ruta';\nurl.search = '?nuevaQuery=456';\nurl.hash = '#nuevaSection';\n\nconsole.log(url.href); // \"http://www.nuevoejemplo.com:8080/nueva/ruta?nuevaQuery=456#nuevaSection\"\n\n",
      "answer": "El objeto URL es una representación de una URL, que te permite acceder y manipular diferentes partes de la misma de manera estructurada.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "5070",
      "topic": "ReactJs",
      "question": "Cómo organizar los archivos en un proyecto?",
      "expanded": "1. Ordenado por tipo: Es simple pero el problema que en poco tiempo nos podemos encontrar con carpetas con infinidad de archivos.\n\n/src\n      /assets\n      /api\n      /configs\n      /components\n          /archivo.jsx\n          /archivo2.jsx\n      /hooks\n          /useFunc.jsx\n      /libs\n      /services\n      /states\n      /utils\n\n2. Ordenado por tipo/feature: Ya se comienza a reflejar el producto en la estructura;  Es más ordenado\n\n/src\n      /assets\n      /api\n      /configs\n      /components\n          /common\n              /archivo.jsx\n              /archivo2.jsx\n          /auth\n              /archivo.jsx\n              /archivo2.jsx\n          /payment\n              /archivo.jsx\n              /archivo2.jsx\n      /hooks\n          /common\n              /useArschivo.jsx\n          /auth\n              /useArschivo.jsx\n              /useAcrchivo2.jsx\n          /payment\n              /archivo.jsx\n              /archivo2.jsx\n          /useFunc.jsx\n      /libs\n      /services\n      /states\n      /utils\n\n3. Screaming architure: Se ordena por Qué hacemos/tipo es útil para proyectos grandes y complejos\n\n/src\n      /assets\n      /api\n      /configs\n      /modules\n            /core\n                  /components\n                  /hooks\n                  /libs\n                  /services\n                  /states\n                  /utils\n            /auth\n                  /components\n                  /hooks\n                  /libs\n                  /services\n                  /states\n                  /utils\n            /payment\n                  /components\n                  /hooks\n                  /libs\n                  /services\n                  /states\n                  /utils\n            /employees\n                  /components\n                  /hooks\n                  /libs\n                  /services\n                  /states\n                  /utils\n",
      "answer": "Las opciones más comunes son...",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "9361",
      "topic": "JS",
      "question": "que es commonjs?",
      "expanded": "CommonJS es una extensión del lenguaje de secuencias de comandos JavaScript que permite utilizar JavaScript en entornos distintos de un navegador, como en el escritorio (o desktop). El propósito de CommonJS es extender JavaScript para que existan módulos estándar, bibliotecas e interfaces de programación que sean adecuados para su implementación en aplicaciones como servicios web, bases de datos y aplicaciones de desktop.\n\nAntecedentes e historia\nEl lenguaje de programación JavaScript se utiliza normalmente como lenguaje dependiente del cliente. JavaScript es interpretado por los navegadores, pero también puede ser utilizado en servidores, por ejemplo, para enviar documentos alterados al cliente o para colocar una cookie en el navegador del cliente. El problema: JavaScript no podía ser interpretado fuera del entorno del navegador. Para solucionarlo, a principios de 2009 se puso en marcha la iniciativa CommonJS.\n\nEl programador Kevin Dangoor fundó CommonJS como un proyecto que se beneficiaría de la participación de muchos programadores. Sugirió complementar JavaScript con ciertos módulos, extensiones y una biblioteca estándar, como en otros lenguajes de programación. Los primeros módulos fueron programados un mes después de la invitación de Dangoor en Internet. Actualmente, varios módulos, interfaces y especificaciones están disponibles no sólo para poder utilizar JavaScript del lado del cliente y del servidor, sino también como una aplicación de escritorio. CommonJS hace que JavaScript sea más universal.\n\nLas plataformas conocidas que soportan CommonJS, incluyen Narwhal y NodeJS.\n\n",
      "answer": "CommonJS es una extensión del lenguaje de secuencias de comandos JavaScript ",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "989f",
      "topic": "JS",
      "question": "Que es un transpilador?",
      "expanded": "Por ejemplo, el código escrito en ES6, traducirlo a ES5. Dicho de otra manera, el código con posibles problemas de compatibilidad, hacerlo compatible con cualquier plataforma.\n\nEl transpilador es una herramienta que se usa durante la fase de desarrollo. En esa fase el programador escribe el código y el transpilador lo convierte en un proceso de \"tradución/compilación = transpilación\". El código transpilado, compatible, es el que realmente se distribuye o se despliega para llevar a producción. Por tanto, todo el trabajo de traducción del código se queda solo en la etapa de desarrollo y no supone una carga mayor para el sistema donde se va a ejecutar de cara al público.\n\nHoy tenemos transpiladores para traducir ES6 a ES5, pero también los hay para traducir de otros lenguajes a Javascript. Quizás hayas oído hablar de TypeScript, o de CoffeeScript o Flow. Son lenguajes que una vez transpilados se convierten en Javascript ES5, compatible con cualquier plataforma.\n\n",
      "answer": "Los transpiladores son programas capaces de traducir el código de un lenguaje para otro, o de una versión para otra.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "81e1",
      "topic": "JS",
      "question": "Qué es ES Modules?",
      "expanded": "Permite dividir el código en módulos reutilizables y organizados, mejorando la mantenibilidad y el encapsulamiento.\n\nAntes de ES6, JavaScript no tenía un sistema de módulos nativo, lo que llevó al uso de soluciones como:\n\n- CommonJS: Usado principalmente en Node.js que utiliza require() para importar módulos y module.exports para exportar (sincronamente)\n- AMD (Asynchronous Module Definition): Popular en aplicaciones web, utiliza define y require para gestionar dependencias.\n- UMD (Universal Module Definition): Intenta unificar CommonJS y AMD en un solo patrón.\n\nES Modules tienen varias ventajas sobre estos sistemas, como:\n\nSoporte nativo: No requieren herramientas adicionales para su uso en navegadores modernos.\nOptimización automática: Los navegadores pueden optimizar la carga de módulos, cargando solo lo que es necesario.\nSimplicidad: Sintaxis más clara y consistente para la importación y exportación de módulos.\n",
      "answer": "ES Modules (Módulos ES) son una característica introducida en ES6 que proporciona un sistema de módulos nativo para JavaScript.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "b6c5",
      "topic": "JS",
      "question": "Qué es Node.js?",
      "expanded": "Fue diseñado para ejecutar aplicaciones JavaScript del lado del servidor, permitiendo el desarrollo de aplicaciones de red altamente escalables y eficientes.\n\nHistoria de Node.js\n\n- Fundación: Node.js fue creado por Ryan Dahl en 2009. Su presentación inicial se llevó a cabo en la conferencia JSConf EU en noviembre de 2009.\n- Objetivo: La principal motivación detrás de Node.js era proporcionar una forma eficiente de manejar múltiples conexiones simultáneas en aplicaciones de red. Esto se logró a través de un modelo de E/S no bloqueante basado en eventos.\n- Adopción: Node.js ganó rápidamente popularidad debido a su capacidad para manejar aplicaciones de alto rendimiento y su compatibilidad con el ecosistema de paquetes de JavaScript a través de npm (Node Package Manager).\n\nCaracterísticas de Node.js\n\n- E/S No Bloqueante: Utiliza un modelo de E/S no bloqueante y basado en eventos que permite manejar un gran número de conexiones simultáneas sin problemas.\nMotor V8 de Google Chrome:\n\n- Node.js está construido sobre el motor V8 de Google Chrome, que compila JavaScript a código máquina nativo, lo que resulta en un rendimiento rápido y eficiente.\nSistema de Módulos CommonJS: Node.js adoptó el sistema de módulos CommonJS, permitiendo a los desarrolladores dividir su código en módulos reutilizables.\nnpm (Node Package Manager):\n\n- Node.js viene con npm, el administrador de paquetes más grande del mundo para JavaScript, que facilita la gestión de dependencias y la instalación de bibliotecas.\nComunidad Activa: Node.js tiene una comunidad activa que contribuye a su crecimiento y mejora continua.",
      "answer": "Node.js es un entorno de ejecución para JavaScript construido sobre el motor V8 de Google Chrome. ",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "e2ba",
      "topic": "JS",
      "question": "Qué es npm?",
      "expanded": "Tal como reza su documentación, npm se compone de al menos dos partes principales.\n\nUn repositorio online para publicar paquetes de software libre para ser utilizados en proyectos Node.js\nUna herramienta para la terminal (command line utility) para interactuar con dicho repositorio que te ayuda a la instalación de utilidades, manejo de dependencias y la publicación de paquetes.\nEs decir, en tu proyecto basado en Node — que actualmente incluye los proyectos de aplicaciones web que utilizan Node para su proceso de compilación y generación de archivos — utilizarás la utilidad de linea de comandos (cli) para consumir paquetes desde el repositorio online, un listado gigantesco de soluciones de software para distintos problemas disponibles públicamente en npmjs.com y para manejar dependencias, y para ello necesitas un archivo de configuración que le diga a npm que este es un proyecto node.",
      "answer": "Node Package Manager o manejador de paquetes de node, es la herramienta por defecto de JavaScript para la tarea de compartir e instalar paquetes.",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "65cb",
      "topic": "JS",
      "question": "package.json",
      "expanded": "El apartado dependencies contiene el nombre y versión de los paquetes de producción, mientras que el campo devDependencies contiene el nombre y versión de los paquetes de desarrollo.\n\nLo realmente interesante de estos campos es que funcionan a modo de índice o guía de paquetes necesarios para el proyecto, de modo que sólo con el fichero package.json en una carpeta vacía, podemos indicarle a npm que descargue todas las dependencias necesarias para el proyecto en la carpeta node_modules/ escribiendo:\n\nnpm install\n\nUna vez instalados los paquetes, tendremos nuestro proyecto listo para realizar bare imports, es decir, importaciones sin ruta (solo con el nombre del paquete), que node buscará en la carpeta node_modules/\n\npackage-lock.json\n\nEl archivo package-lock.json es un archivo generado automáticamente cuando se instalan paquetes o dependencias en el proyecto. Su finalidad es mantener un historial de los paquetes instalados y optimizar la forma en que se generan las dependencias del proyecto y los contenidos de la carpeta node_modules/.\n\nEste archivo debe conservarse e incluso versionarse para añadirlo al repositorio de control de versiones, puesto que es algo favorable para el trabajo con npm. Es por ello que no debe añadirse al fichero .gitignore",
      "answer": "es un archivo generado automáticamente cuando se instalan paquetes o dependencias en el proyecto",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "9f2b",
      "topic": "JS",
      "question": "Gestores de paquetes",
      "expanded": "1. npm (Node Package Manager)\n\nCaracterísticas:\n- Centralidad: Es el gestor de paquetes predeterminado para Node.js.\n- Ecosistema: Cuenta con el repositorio más grande de paquetes de software, llamado npm Registry.\nComandos básicos: npm install, npm update, npm uninstall.\n-  Scripts: Permite ejecutar scripts definidos en el archivo package.json.\n- Workspaces: Desde npm v7, soporta proyectos con múltiples paquetes y monorepositorios.\n\nVentajas:\n- Gran cantidad de paquetes disponibles.\n- Fácil de usar para proyectos de Node.js y front-end.\n\nDesventajas:\n- Ha tenido problemas de rendimiento en versiones anteriores.\n- Hasta v6, el manejo de node_modules era menos eficiente comparado con otros gestores.\n\n2. Yarn\n\nCaracterísticas:\n- Rendimiento: Más rápido que npm en operaciones de instalación gracias al caching eficiente y al paralelismo en descargas.\n- Determinismo: Instala las mismas versiones de las dependencias a través de yarn.lock.\n- Monorepositorios: Soporte robusto para proyectos monorepositorios con Workspaces.\n- Comandos básicos: yarn add, yarn upgrade, yarn remove.\n\nVentajas:\n- Enfocado en la velocidad y la seguridad.\n- Mejor manejo de dependencias de versiones específicas.\n\nDesventajas:\n- Menos paquetes que npm (aunque sigue utilizando el mismo registro).\n- Requiere instalación adicional aparte de Node.js.\n\n3. pnpm\n\nCaracterísticas:\n- Eficiencia en almacenamiento: Usa una técnica de almacenamiento basada en enlaces simbólicos, lo que ahorra espacio en disco.\n- Velocidad: Proporciona instalaciones más rápidas debido a su enfoque en la reutilización de paquetes.\n- Consistencia: Garantiza un entorno de instalación limpio y evita duplicados.\n- Comandos básicos: pnpm add, pnpm update, pnpm remove.\n\nVentajas:\n- Consume menos espacio en disco.\n- Excelente para manejar monorepositorios.\n\nDesventajas:\n- Menos conocido y adoptado que npm o Yarn, lo que puede resultar en menos soporte en la comunidad.",
      "answer": "Los gestores de paquetes son herramientas esenciales para los desarrolladores de software, ya que facilitan la instalación, actualización, configuración y eliminación de dependencias en un proyecto",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "e31d",
      "topic": "JS",
      "question": "Webpack",
      "expanded": "Permite a los desarrolladores gestionar y agrupar todos los recursos y dependencias de una aplicación, incluyendo JavaScript, CSS, imágenes y otros tipos de archivos, en un solo paquete optimizado que se puede servir fácilmente en producción.\n\nCaracterísticas de Webpack\n\nEmpaquetado de Módulos:\n- JavaScript Moderno: Webpack permite importar y usar módulos de JavaScript mediante ES6, CommonJS, AMD, y otros estándares, consolidándolos en un único archivo de salida.\n- Soporte para Archivos Estáticos: No solo se limita a JavaScript; también puede procesar CSS, imágenes, fuentes, y otros activos.\n\nCode Splitting:\n- Divide el código en partes más pequeñas o \"chunks\", lo que permite la carga bajo demanda de estos módulos y mejora el tiempo de carga inicial de las aplicaciones.\n\nLoaders:\n- Transformación de Archivos: Loaders permiten a Webpack manejar otros tipos de archivos y transformarlos en módulos que se pueden incluir en el bundle. Ejemplos incluyen loaders para procesar CSS, archivos SVG, imágenes, etc.\n- Uso común: babel-loader para convertir código ES6+ en ES5, css-loader para importar CSS directamente desde JavaScript, style-loader para insertar CSS en el DOM, y file-loader para manejar archivos de imagen.\n\nPlugins:\n- Extensibilidad: Webpack permite la personalización del proceso de empaquetado mediante plugins que pueden realizar tareas como minificación de archivos, extracción de CSS a archivos separados, inyección de variables de entorno, entre otros.\n- Ejemplos de Plugins: HtmlWebpackPlugin para generar archivos HTML automáticamente, MiniCssExtractPlugin para extraer CSS a archivos independientes, CleanWebpackPlugin para limpiar el directorio de salida antes de cada compilación.\n\nDev Server y Hot Module Replacement (HMR):\n- Desarrollo Local Rápido: Webpack Dev Server proporciona un servidor de desarrollo que actualiza la aplicación automáticamente a medida que haces cambios, sin necesidad de recargar manualmente el navegador.\n- HMR: Permite reemplazar partes de la aplicación en tiempo real sin recargar toda la página, conservando el estado de la aplicación.\n\nTree Shaking:\n- Eliminación de Código Muerto: Esta característica permite eliminar el código que no se utiliza en la aplicación final, reduciendo el tamaño del bundle y mejorando la eficiencia de carga.\n\nOptimización de Producción:\n- Minificación y Compresión: Webpack puede minificar JavaScript y CSS, y también generar archivos gzip o brotli comprimidos para una entrega más rápida.\n- Hashing: Asigna hashes a los archivos de salida para facilitar el almacenamiento en caché de recursos y mejorar el rendimiento de la aplicación.\n\nConfiguración Flexible:\n- Webpack ofrece un alto grado de personalización a través de su archivo de configuración (webpack.config.js), lo que permite adaptar el proceso de construcción a las necesidades específicas del proyecto.\n",
      "answer": "Webpack es una herramienta de construcción y empaquetado de módulos para aplicaciones web",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    },
    {
      "id": "fba9",
      "topic": "JS",
      "question": "Por Qué Usar Webpack",
      "expanded": "El uso de Webpack se ha vuelto común en el desarrollo web moderno debido a varias razones:\n\n- Modularidad: Facilita el uso de un enfoque modular en el desarrollo de aplicaciones, donde el código se organiza en componentes reutilizables.\n- Optimización de Rendimiento: Permite optimizar el rendimiento mediante la minimización, compresión, y división de código.\n- Soporte para Múltiples Archivos: Unifica el manejo de diversos tipos de archivos y permite un flujo de trabajo eficiente.\n- Integración con Herramientas Modernas: Webpack se integra bien con herramientas modernas de desarrollo como Babel, ESLint, y Prettier.\n\nCómo Funciona Webpack\n\nPara entender mejor cómo opera Webpack, es útil explorar un flujo de trabajo típico:\n- Punto de Entrada (Entry): Webpack comienza su proceso de construcción desde un punto de entrada definido, que es el archivo principal de la aplicación. Por defecto, Webpack utiliza ./src/index.js, aunque esto se puede configurar.\n\n- Resolución de Módulos: Webpack analiza las importaciones de este archivo de entrada y de cada módulo sucesivo, construyendo un gráfico de dependencias que describe cómo se relacionan los módulos entre sí.\n\n- Aplicación de Loaders: A medida que Webpack resuelve los módulos, aplica loaders para transformar los archivos según lo necesitado, como convertir JSX a JavaScript con Babel o importar estilos CSS.\n\n- Uso de Plugins: Durante el proceso de construcción, Webpack utiliza plugins para extender sus capacidades y realizar tareas adicionales. Por ejemplo, se puede utilizar HtmlWebpackPlugin para generar dinámicamente un archivo HTML que incluya todos los bundles.\n\n- Salida (Output): Finalmente, Webpack empaqueta todos los módulos resueltos en uno o más archivos de salida (bundles) que pueden ser servidos en producción. Por defecto, el archivo de salida es ./dist/main.js.\n\nComponentes del Archivo de Configuración:\n- Entry: Define el punto de entrada de la aplicación donde Webpack comienza a construir el gráfico de dependencias.\n- Output: Especifica dónde y cómo se generarán los archivos de salida.\n- Mode: Determina si la configuración es para desarrollo o producción, lo que afecta la optimización y el comportamiento de Webpack.\n- DevServer: Configura el servidor de desarrollo para una experiencia de desarrollo más rápida y fácil.\n- Module: Define las reglas para transformar diferentes tipos de archivos usando loaders.\n- Plugins: Extiende las capacidades de Webpack con funcionalidades adicionales.",
      "answer": "",
      "video": "",
      "time": "",
      "test": "learn",
      "okCounter": 0
    }
  ]
}